{"version":3,"file":"functions.cjs","sources":["../src/utils.ts","../src/center.ts","../src/list-node-scenes.ts","../src/clear-node-parent.ts","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/gl-matrix/esm/vec3.js","../../../node_modules/gl-matrix/esm/vec4.js","../src/dedup.ts","../src/list-texture-info.ts","../src/prune.ts","../src/weld.ts","../src/clean-primitive.ts","../src/transform-primitive.ts","../../../node_modules/gl-matrix/esm/mat3.js","../src/transform-mesh.ts","../src/clear-node-transform.ts","../src/dequantize.ts","../src/draco.ts","../src/flatten.ts","../src/get-texture-color-space.ts","../src/inspect.ts","../src/instance.ts","../src/join-primitives.ts","../src/join.ts","../src/list-texture-channels.ts","../src/list-texture-slots.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/palette.ts","../src/partition.ts","../../../node_modules/keyframe-resample/dist/keyframe-resample-browser.modern.js","../src/resample.ts","../src/sequence.ts","../src/simplify.ts","../src/sparse.ts","../src/texture-resize.ts","../src/texture-compress.ts","../src/tangents.ts","../src/unpartition.ts","../src/vertex-color-space.ts","../src/get-node-scene.ts","../src/unlit.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tProperty,\n\tPropertyType,\n\tTexture,\n\tTransform,\n\tTransformContext,\n\tvec2,\n} from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n * @hidden\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\n/** @hidden */\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/**\n * Maps pixels from source to target textures, with a per-pixel callback.\n * @hidden\n */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void,\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\n/** @hidden */\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\n/** @hidden */\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\n/** @hidden */\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/** @hidden */\nexport function formatLong(x: number): string {\n\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/** @hidden */\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\n/** @hidden */\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n * @hidden\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\n/** @hidden */\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\n/** @hidden */\nexport function shallowEqualsArray(a: ArrayLike<unknown> | null, b: ArrayLike<unknown> | null) {\n\tif (a == null && b == null) return true;\n\tif (a == null || b == null) return false;\n\tif (a.length !== b.length) return false;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\treturn true;\n}\n\n/** @hidden */\nexport function remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/** @hidden */\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n\n/** @hidden */\nexport function isUsed(prop: Property): boolean {\n\treturn prop.listParents().some((parent) => parent.propertyType !== PropertyType.ROOT);\n}\n\n/**\n * Creates a unique key associated with the structure and draw call characteristics of\n * a {@link Primitive}, independent of its vertex content. Helper method, used to\n * identify candidate Primitives for joining.\n * @hidden\n */\nexport function createPrimGroupKey(prim: Primitive): string {\n\tconst document = Document.fromGraph(prim.getGraph())!;\n\tconst material = prim.getMaterial();\n\tconst materialIndex = document.getRoot().listMaterials().indexOf(material!);\n\tconst mode = prim.getMode();\n\tconst indices = !!prim.getIndices();\n\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.sort()\n\t\t.map((semantic) => {\n\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\tconst componentType = attribute.getComponentType();\n\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t})\n\t\t.join('+');\n\n\tconst targets = prim\n\t\t.listTargets()\n\t\t.map((target) => {\n\t\t\treturn target\n\t\t\t\t.listSemantics()\n\t\t\t\t.sort()\n\t\t\t\t.map((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\t\t\tconst componentType = attribute.getComponentType();\n\t\t\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t\t\t})\n\t\t\t\t.join('+');\n\t\t})\n\t\t.join('~');\n\n\treturn `${materialIndex}|${mode}|${indices}|${attributes}|${targets}`;\n}\n\n/** @hidden */\nexport function fitWithin(size: vec2, limit: vec2): vec2 {\n\tconst [maxWidth, maxHeight] = limit;\n\tconst [srcWidth, srcHeight] = size;\n\n\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) return size;\n\n\tlet dstWidth = srcWidth;\n\tlet dstHeight = srcHeight;\n\n\tif (dstWidth > maxWidth) {\n\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\tdstWidth = maxWidth;\n\t}\n\n\tif (dstHeight > maxHeight) {\n\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\tdstHeight = maxHeight;\n\t}\n\n\treturn [dstWidth, dstHeight];\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { getBounds } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n *\n * @category Transforms\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = { ...CENTER_DEFAULTS, ..._options } as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = getBounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Node, Scene } from '@gltf-transform/core';\n\n/**\n * Finds the parent {@link Scene Scenes} associated with the given {@link Node}.\n * In most cases a Node is associated with only one Scene, but it is possible\n * for a Node to be located in two or more Scenes, or none at all.\n *\n * Example:\n *\n * ```typescript\n * import { listNodeScenes } from '@gltf-transform/functions';\n *\n * const node = document.getRoot().listNodes()\n *  .find((node) => node.getName() === 'MyNode');\n *\n * const scenes = listNodeScenes(node);\n * ```\n */\nexport function listNodeScenes(node: Node): Scene[] {\n\tconst visited = new Set<Node>();\n\n\tlet child = node;\n\tlet parent: Node | null;\n\n\twhile ((parent = child.getParentNode() as Node | null)) {\n\t\tif (visited.has(parent)) {\n\t\t\tthrow new Error('Circular dependency in scene graph.');\n\t\t}\n\t\tvisited.add(parent);\n\t\tchild = parent;\n\t}\n\n\treturn child.listParents().filter((parent) => parent instanceof Scene) as Scene[];\n}\n","import type { Node } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/**\n * Clears the parent of the given {@link Node}, leaving it attached\n * directly to its {@link Scene}. Inherited transforms will be applied\n * to the Node. This operation changes the Node's local transform,\n * but leaves its world transform unchanged.\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeParent } from '@gltf-transform/functions';\n *\n * scene.traverse((node) => { ... }); // Scene → … → Node\n *\n * clearNodeParent(node);\n *\n * scene.traverse((node) => { ... }); // Scene → Node\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeParent(node: Node): Node {\n\tconst scenes = listNodeScenes(node);\n\tconst parent = node.getParentNode();\n\n\tif (!parent) return node;\n\n\t// Apply inherited transforms to local matrix. Skinned meshes are not affected\n\t// by the node parent's transform, and can be ignored. Updates to IBMs and TRS\n\t// animations are out of scope in this context.\n\tnode.setMatrix(node.getWorldMatrix());\n\n\t// Add to Scene roots.\n\tparent.removeChild(node);\n\tfor (const scene of scenes) scene.addChild(node);\n\n\treturn node;\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tSkin,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { createTransform, shallowEqualsArray } from './utils.js';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.SKIN,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n *\n * @category Transforms\n */\nexport function dedup(_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = { ...DEDUP_DEFAULTS, ..._options } as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst logger = document.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(document);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(document);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(document);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(document);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) dedupSkins(document);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dedupAccessors(document: Document): void {\n\tconst logger = document.getLogger();\n\n\t// Find all accessors used for mesh and animation data.\n\tconst indicesMap = new Map<string, Set<Accessor>>();\n\tconst attributeMap = new Map<string, Set<Accessor>>();\n\tconst inputMap = new Map<string, Set<Accessor>>();\n\tconst outputMap = new Map<string, Set<Accessor>>();\n\n\tconst meshes = document.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => hashAccessor(accessor, attributeMap));\n\t\t\thashAccessor(primitive.getIndices(), indicesMap);\n\t\t});\n\t});\n\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\thashAccessor(sampler.getInput(), inputMap);\n\t\t\thashAccessor(sampler.getOutput(), outputMap);\n\t\t}\n\t}\n\n\t// Add accessor to the appropriate hash group. Hashes are _non-unique_,\n\t// intended to quickly compare everything accept the underlying array.\n\tfunction hashAccessor(accessor: Accessor | null, group: Map<string, Set<Accessor>>): void {\n\t\tif (!accessor) return;\n\n\t\tconst hash = [\n\t\t\taccessor.getCount(),\n\t\t\taccessor.getType(),\n\t\t\taccessor.getComponentType(),\n\t\t\taccessor.getNormalized(),\n\t\t\taccessor.getSparse(),\n\t\t].join(':');\n\n\t\tlet hashSet = group.get(hash);\n\t\tif (!hashSet) group.set(hash, (hashSet = new Set<Accessor>()));\n\t\thashSet.add(accessor);\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[], duplicates: Map<Accessor, Accessor>): void {\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicates.has(a)) continue;\n\n\t\t\tfor (let j = i + 1; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t\t// Just compare the arrays — everything else was covered by the\n\t\t\t\t// hash. Comparing uint8 views is faster than comparing the\n\t\t\t\t// original typed arrays.\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicates.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlet total = 0;\n\tconst duplicates = new Map<Accessor, Accessor>();\n\tfor (const group of [attributeMap, indicesMap, inputMap, outputMap]) {\n\t\tfor (const hashGroup of group.values()) {\n\t\t\ttotal += hashGroup.size;\n\t\t\tdetectDuplicates(Array.from(hashGroup), duplicates);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${total} accessors.`);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicates.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicates.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicates.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicates.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicates.has(input)) {\n\t\t\t\tsampler.swap(input, duplicates.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicates.has(output)) {\n\t\t\t\tsampler.swap(output, duplicates.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\n\tArray.from(duplicates.keys()).forEach((accessor) => accessor.dispose());\n}\n\nfunction dedupMeshes(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${numMeshes - uniqueMeshes.size} of ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates = new Map<Material, Material>();\n\tconst skip = new Set(['name']);\n\tconst modifierCache = new Map<Material, boolean>();\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\t\tif (hasModifier(a, modifierCache)) continue;\n\n\t\tfor (let j = i + 1; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\n\t\t\tif (duplicates.has(b)) continue;\n\t\t\tif (hasModifier(b, modifierCache)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${materials.length} materials.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupSkins(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst skins = root.listSkins();\n\tconst duplicates = new Map<Skin, Skin>();\n\tconst skip = new Set(['name', 'joints']);\n\n\tfor (let i = 0; i < skins.length; i++) {\n\t\tconst a = skins[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < skins.length; j++) {\n\t\t\tconst b = skins[j];\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// Check joints with shallow equality, not deep equality.\n\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RecursiveSkeletons\n\t\t\tif (a.equals(b, skip) && shallowEqualsArray(a.listJoints(), b.listJoints())) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Merged ${duplicates.size} of ${skins.length} skins.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n\n/**\n * Detects dependencies modified by a parent reference, to conservatively prevent merging. When\n * implementing extensions like KHR_animation_pointer, the 'modifyChild' attribute should be added\n * to graph edges connecting the animation channel to the animated target property.\n *\n * NOTICE: Implementation is conservative, and could prevent merging two materials sharing the\n * same animated \"Clearcoat\" ExtensionProperty. While that scenario is possible for an in-memory\n * glTF Transform graph, valid glTF input files do not have that risk.\n */\nfunction hasModifier(prop: Property, cache: Map<Property, boolean>): boolean {\n\tif (cache.has(prop)) return cache.get(prop)!;\n\n\tconst graph = prop.getGraph();\n\tconst visitedNodes = new Set<Property>();\n\tconst edgeQueue = graph.listParentEdges(prop);\n\n\t// Search dependency subtree for 'modifyChild' attribute.\n\twhile (edgeQueue.length > 0) {\n\t\tconst edge = edgeQueue.pop()!;\n\t\tif (edge.getAttributes().modifyChild === true) {\n\t\t\tcache.set(prop, true);\n\t\t\treturn true;\n\t\t}\n\n\t\tconst child = edge.getChild();\n\t\tif (visitedNodes.has(child)) continue;\n\n\t\tfor (const childEdge of graph.listChildEdges(child)) {\n\t\t\tedgeQueue.push(childEdge);\n\t\t}\n\t}\n\n\tcache.set(prop, false);\n\treturn false;\n}\n","import { ExtensionProperty, Material, Property, Texture, TextureInfo } from '@gltf-transform/core';\n\n/**\n * Lists all {@link TextureInfo} definitions associated with a given\n * {@link Texture}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfo(texture: Texture): TextureInfo[] {\n\tconst graph = texture.getGraph();\n\tconst results = new Set<TextureInfo>();\n\n\tfor (const textureEdge of graph.listParentEdges(texture)) {\n\t\tconst parent = textureEdge.getParent();\n\t\tconst name = textureEdge.getName() + 'Info';\n\n\t\tfor (const edge of graph.listChildEdges(parent)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (child instanceof TextureInfo && edge.getName() === name) {\n\t\t\t\tresults.add(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Array.from(results);\n}\n\n/**\n * Lists all {@link TextureInfo} definitions associated with any {@link Texture}\n * on the given {@link Material}. May be used to determine which UV transforms\n * and texCoord indices are applied to the material, without explicitly\n * checking the material properties and extensions.\n *\n * Example:\n *\n * ```typescript\n * const results = listTextureInfoByMaterial(material);\n *\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 1]\n * ```\n */\nexport function listTextureInfoByMaterial(material: Material): TextureInfo[] {\n\tconst graph = material.getGraph();\n\tconst visited = new Set<Property>();\n\tconst results = new Set<TextureInfo>();\n\n\tfunction traverse(prop: Material | ExtensionProperty) {\n\t\tconst textureInfoNames = new Set<string>();\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tif (edge.getChild() instanceof Texture) {\n\t\t\t\ttextureInfoNames.add(edge.getName() + 'Info');\n\t\t\t}\n\t\t}\n\n\t\tfor (const edge of graph.listChildEdges(prop)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (visited.has(child)) continue;\n\t\t\tvisited.add(child);\n\n\t\t\tif (child instanceof TextureInfo && textureInfoNames.has(edge.getName())) {\n\t\t\t\tresults.add(child);\n\t\t\t} else if (child instanceof ExtensionProperty) {\n\t\t\t\ttraverse(child);\n\t\t\t}\n\t\t}\n\t}\n\n\ttraverse(material);\n\treturn Array.from(results);\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tGraph,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tNode,\n\tScene,\n\tExtensionProperty,\n\tMaterial,\n\tPrimitive,\n\tPrimitiveTarget,\n\tTexture,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\nimport { listTextureInfoByMaterial } from './list-texture-info.js';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n\t/** Whether to keep unused vertex attributes, such as UVs without an assigned texture. */\n\tkeepAttributes?: boolean;\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n\tkeepAttributes: true,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function prune(_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...PRUNE_DEFAULTS, ..._options } as Required<PruneOptions>;\n\tconst propertyTypes = new Set(options.propertyTypes);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\t// Prune empty Meshes.\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tif (mesh.listPrimitives().length > 0) continue;\n\t\t\t\tmesh.dispose();\n\t\t\t\tmarkDisposed(mesh);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.NODE) && !options.keepLeaves) root.listScenes().forEach(nodeTreeShake);\n\t\tif (propertyTypes.has(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Prune unused vertex attributes.\n\t\tif (!options.keepAttributes && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tconst materialPrims = new Map<Material, Set<Primitive>>();\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\t\tconst required = listRequiredSemantics(doc, material);\n\t\t\t\t\tconst unused = listUnusedSemantics(prim, required);\n\t\t\t\t\tpruneAttributes(prim, unused);\n\t\t\t\t\tprim.listTargets().forEach((target) => pruneAttributes(target, unused));\n\t\t\t\t\tif (material) {\n\t\t\t\t\t\tmaterialPrims.has(material)\n\t\t\t\t\t\t\t? materialPrims.get(material)!.add(prim)\n\t\t\t\t\t\t\t: materialPrims.set(material, new Set([prim]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const [material, prims] of materialPrims) {\n\t\t\t\tshiftTexCoords(material, Array.from(prims));\n\t\t\t}\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed)\n\t\t\t\t.map((t) => `${t} (${disposed[t]})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph\n\t\t\t\t.listEdges()\n\t\t\t\t.map((edge) => edge.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Iteratively prunes leaf Nodes without contents. */\n\t\tfunction nodeTreeShake(prop: Node | Scene): void {\n\t\t\tprop.listChildren().forEach(nodeTreeShake);\n\n\t\t\tif (prop instanceof Scene) return;\n\n\t\t\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\t\t\tconst ptype = e.getParent().propertyType;\n\t\t\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t\t\t});\n\t\t\tconst isEmpty = graph.listChildren(prop).length === 0;\n\t\t\tif (isEmpty && !isUsed) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\tfunction pruneAttributes(prim: Primitive | PrimitiveTarget, unused: string[]) {\n\t\t\tfor (const semantic of unused) {\n\t\t\t\tprim.setAttribute(semantic, null);\n\t\t\t}\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\t});\n}\n\n/**\n * Lists vertex attribute semantics that are unused when rendering a given primitive.\n */\nfunction listUnusedSemantics(prim: Primitive | PrimitiveTarget, required: Set<string>): string[] {\n\tconst unused = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (semantic === 'TANGENT' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('TEXCOORD_') && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('COLOR_') && semantic !== 'COLOR_0') {\n\t\t\tunused.push(semantic);\n\t\t}\n\t}\n\treturn unused;\n}\n\n/**\n * Lists vertex attribute semantics required by a material. Does not include\n * attributes that would be used unconditionally, like POSITION or NORMAL.\n */\nfunction listRequiredSemantics(\n\tdocument: Document,\n\tmaterial: Material | ExtensionProperty | null,\n\tsemantics = new Set<string>()\n): Set<string> {\n\tif (!material) return semantics;\n\n\tconst graph = document.getGraph();\n\n\tconst edges = graph.listChildEdges(material);\n\tconst textureNames = new Set<string>();\n\n\tfor (const edge of edges) {\n\t\tif (edge.getChild() instanceof Texture) {\n\t\t\ttextureNames.add(edge.getName());\n\t\t}\n\t}\n\n\tfor (const edge of edges) {\n\t\tconst name = edge.getName();\n\t\tconst child = edge.getChild();\n\n\t\tif (child instanceof TextureInfo) {\n\t\t\tif (textureNames.has(name.replace(/Info$/, ''))) {\n\t\t\t\tsemantics.add(`TEXCOORD_${child.getTexCoord()}`);\n\t\t\t}\n\t\t}\n\n\t\tif (child instanceof Texture && name.match(/normalTexture/i)) {\n\t\t\tsemantics.add('TANGENT');\n\t\t}\n\n\t\tif (child instanceof ExtensionProperty) {\n\t\t\tlistRequiredSemantics(document, child, semantics);\n\t\t}\n\n\t\t// TODO(#748): Does KHR_materials_anisotropy imply required vertex attributes?\n\t}\n\n\treturn semantics;\n}\n\n/**\n * Shifts texCoord indices on the given material and primitives assigned to\n * that material, such that indices start at zero and ascend without gaps.\n * Prior to calling this function, the implementation must ensure that:\n * - All TEXCOORD_n attributes on these prims are used by the material.\n * - Material does not require any unavailable TEXCOORD_n attributes.\n *\n * TEXCOORD_n attributes on morph targets are shifted alongside the parent\n * prim, but gaps may remain in their semantic lists.\n */\nfunction shiftTexCoords(material: Material, prims: Primitive[]) {\n\t// Create map from srcTexCoord → dstTexCoord.\n\tconst textureInfoList = listTextureInfoByMaterial(material);\n\tconst texCoordSet = new Set(textureInfoList.map((info: TextureInfo) => info.getTexCoord()));\n\tconst texCoordList = Array.from(texCoordSet).sort();\n\tconst texCoordMap = new Map(texCoordList.map((texCoord, index) => [texCoord, index]));\n\tconst semanticMap = new Map(texCoordList.map((texCoord, index) => [`TEXCOORD_${texCoord}`, `TEXCOORD_${index}`]));\n\n\t// Update material.\n\tfor (const textureInfo of textureInfoList) {\n\t\tconst texCoord = textureInfo.getTexCoord();\n\t\ttextureInfo.setTexCoord(texCoordMap.get(texCoord)!);\n\t}\n\n\t// Update prims.\n\tfor (const prim of prims) {\n\t\tconst semantics = prim\n\t\t\t.listSemantics()\n\t\t\t.filter((semantic) => semantic.startsWith('TEXCOORD_'))\n\t\t\t.sort();\n\t\tupdatePrim(prim, semantics);\n\t\tprim.listTargets().forEach((target) => updatePrim(target, semantics));\n\t}\n\n\tfunction updatePrim(prim: Primitive | PrimitiveTarget, srcSemantics: string[]) {\n\t\tfor (const srcSemantic of srcSemantics) {\n\t\t\tconst uv = prim.getAttribute(srcSemantic);\n\t\t\tif (!uv) continue;\n\n\t\t\tconst dstSemantic = semanticMap.get(srcSemantic)!;\n\t\t\tif (dstSemantic === srcSemantic) continue;\n\n\t\t\tprim.setAttribute(dstSemantic, uv);\n\t\t\tprim.setAttribute(srcSemantic, null);\n\t\t}\n\t}\n}\n","import {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tTransform,\n\tTypedArray,\n\tvec3,\n} from '@gltf-transform/core';\nimport { cleanPrimitive } from './clean-primitive.js';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\nimport { createIndices, createTransform, formatDeltaOp } from './utils.js';\n\n// DEVELOPER NOTES: Ideally a weld() implementation should be fast, robust,\n// and tunable. The writeup below tracks my attempts to solve for these\n// constraints.\n//\n// (Approach #1) Follow the mergeVertices() implementation of three.js,\n// hashing vertices with a string concatenation of all vertex attributes.\n// The approach does not allow per-attribute tolerance in local units.\n//\n// (Approach #2) Sort points along the X axis, then make cheaper\n// searches up/down the sorted list for merge candidates. While this allows\n// simpler comparison based on specified tolerance, it's much slower, even\n// for cases where choice of the X vs. Y or Z axes is reasonable.\n//\n// (Approach #3) Attempted a Delaunay triangulation in three dimensions,\n// expecting it would be an n * log(n) algorithm, but the only implementation\n// I found (with delaunay-triangulate) appeared to be much slower than that,\n// and was notably slower than the sort-based approach, just building the\n// Delaunay triangulation alone.\n//\n// (Approach #4) Hybrid of (1) and (2), assigning vertices to a spatial\n// grid, then searching the local neighborhood (27 cells) for weld candidates.\n//\n// RESULTS: For the \"Lovecraftian\" sample model, after joining, a primitive\n// with 873,000 vertices can be welded down to 230,000 vertices. Results:\n// - (1) Not tested, but prior results suggest not robust enough.\n// - (2) 30 seconds\n// - (3) 660 seconds\n// - (4) 5 seconds exhaustive, 1.5s non-exhaustive\n\nconst NAME = 'weld';\n\nconst Tolerance = {\n\tDEFAULT: 0.0001,\n\tTEXCOORD: 0.0001, // [0, 1]\n\tCOLOR: 0.01, // [0, 1]\n\tNORMAL: 0.05, // [-1, 1], ±3º\n\tJOINTS: 0.0, // [0, ∞]\n\tWEIGHTS: 0.01, // [0, ∞]\n};\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Tolerance for vertex positions, as a fraction of primitive AABB. */\n\ttolerance?: number;\n\t/** Tolerance for vertex normals, in radians. */\n\ttoleranceNormal?: number;\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n\t/** Enables a more thorough, but slower, search for vertices to weld. */\n\texhaustive?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\ttolerance: Tolerance.DEFAULT,\n\ttoleranceNormal: Tolerance.NORMAL,\n\toverwrite: true,\n\texhaustive: false, // donmccurdy/glTF-Transform#886\n};\n\n/**\n * Index {@link Primitive Primitives} and (optionally) merge similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For `tolerance=0`, geometry\n * is indexed in place, without merging.\n *\n * To preserve visual appearance consistently, use low `toleranceNormal` thresholds\n * around 0.1 (±3º). To pre-processing a scene before simplification or LOD creation,\n * use higher thresholds around 0.5 (±30º).\n *\n * Example:\n *\n * ```javascript\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001, toleranceNormal: 0.5 })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = expandWeldOptions(_options);\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tweldPrimitive(doc, prim, options);\n\n\t\t\t\tif (prim.getIndices()!.getCount() === 0) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\tif (options.tolerance > 0) {\n\t\t\t// If tolerance is greater than 0, welding may remove a mesh, so we prune\n\t\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE] }));\n\t\t}\n\n\t\tawait doc.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Index a {@link Primitive} and (optionally) weld similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weldPrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes()\n * \t.find((mesh) => mesh.getName() === 'Gizmo');\n *\n * for (const prim of mesh.listPrimitives()) {\n *   weldPrimitive(prim, {tolerance: 0.0001});\n * }\n * ```\n *\n * @privateRemarks TODO(v4): Remove the \"Document\" parameter.\n */\nexport function weldPrimitive(\n\ta: Document | Primitive,\n\tb: Primitive | WeldOptions = WELD_DEFAULTS,\n\tc = WELD_DEFAULTS,\n): void {\n\tlet _document: Document;\n\tlet _prim: Primitive;\n\tlet _options: Required<WeldOptions>;\n\tif (a instanceof Primitive) {\n\t\tconst graph = a.getGraph();\n\t\t_document = Document.fromGraph(graph)!;\n\t\t_prim = a;\n\t\t_options = expandWeldOptions(b as WeldOptions);\n\t} else {\n\t\t_document = a;\n\t\t_prim = b as Primitive;\n\t\t_options = expandWeldOptions(c as WeldOptions);\n\t}\n\n\tif (_prim.getIndices() && !_options.overwrite) return;\n\tif (_prim.getMode() === Primitive.Mode.POINTS) return;\n\n\tif (_options.tolerance === 0) {\n\t\t_indexPrimitive(_document, _prim);\n\t} else {\n\t\t_weldPrimitive(_document, _prim, _options);\n\t}\n}\n\n/** @internal Adds indices, if missing. Does not merge vertices. */\nfunction _indexPrimitive(doc: Document, prim: Primitive): void {\n\t// No need to overwrite here, even if options.overwrite=true.\n\tif (prim.getIndices()) return;\n\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indices = doc\n\t\t.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(createIndices(numVertices));\n\tprim.setIndices(indices);\n}\n\n/** @internal Weld and merge, combining vertices that are similar on all vertex attributes. */\nfunction _weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tconst srcPosition = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices() || doc.createAccessor().setArray(createIndices(srcPosition.getCount()));\n\tconst uniqueIndices = new Uint32Array(new Set(srcIndices.getArray()!)).sort();\n\n\t// (1) Compute per-attribute tolerance and spatial grid for vertices.\n\n\tconst attributeTolerance: Record<string, number> = {};\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tattributeTolerance[semantic] = getAttributeTolerance(semantic, attribute, options);\n\t}\n\n\tlogger.debug(`${NAME}: Tolerance thresholds: ${formatKV(attributeTolerance)}`);\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst posA: vec3 = [0, 0, 0];\n\tconst posB: vec3 = [0, 0, 0];\n\n\tconst grid = {} as Record<string, number[]>;\n\tconst cellSize = attributeTolerance.POSITION;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tsrcPosition.getElement(uniqueIndices[i], posA);\n\t\tconst key = getGridKey(posA, cellSize);\n\t\tgrid[key] = grid[key] || [];\n\t\tgrid[key].push(uniqueIndices[i]);\n\t}\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst srcMaxIndex = uniqueIndices[uniqueIndices.length - 1];\n\tconst weldMap = createIndices(srcMaxIndex + 1); // oldIndex → oldCommonIndex\n\tconst writeMap = new Array(uniqueIndices.length).fill(-1); // oldIndex → newIndex\n\n\tconst srcVertexCount = srcPosition.getCount();\n\tlet dstVertexCount = 0;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tconst a = uniqueIndices[i];\n\t\tsrcPosition.getElement(a, posA);\n\n\t\tconst cellKeys = options.exhaustive ? getGridNeighborhoodKeys(posA, cellSize) : [getGridKey(posA, cellSize)];\n\n\t\tcells: for (const cellKey of cellKeys) {\n\t\t\tif (!grid[cellKey]) continue cells; // May occur in exhaustive search.\n\n\t\t\tneighbors: for (const j of grid[cellKey]) {\n\t\t\t\tconst b = weldMap[j];\n\n\t\t\t\t// Only weld to lower indices, preventing two-way match.\n\t\t\t\tif (a <= b) continue neighbors;\n\n\t\t\t\tsrcPosition.getElement(b, posB);\n\n\t\t\t\t// Weld if base attributes and morph target attributes match.\n\t\t\t\tconst isBaseMatch = prim.listSemantics().every((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t});\n\t\t\t\tconst isTargetMatch = prim.listTargets().every((target) => {\n\t\t\t\t\treturn target.listSemantics().every((semantic) => {\n\t\t\t\t\t\tconst attribute = target.getAttribute(semantic)!;\n\t\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (isBaseMatch && isTargetMatch) {\n\t\t\t\t\tweldMap[a] = b;\n\t\t\t\t\tbreak cells;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Output the vertex if we didn't find a match, else record the index of the match. Because\n\t\t// we iterate vertices in ascending order, and only match to lower indices, we're\n\t\t// guaranteed the source vertex for a weld has already been marked for output.\n\t\tif (weldMap[a] === a) {\n\t\t\twriteMap[a] = dstVertexCount++;\n\t\t} else {\n\t\t\twriteMap[a] = writeMap[weldMap[a]];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// (3) Update indices.\n\n\tconst dstIndicesCount = srcIndices.getCount(); // # primitives does not change.\n\tconst dstIndicesArray = createIndices(dstIndicesCount, uniqueIndices.length);\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = writeMap[srcIndices.getScalar(i)];\n\t}\n\tprim.setIndices(srcIndices.clone().setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\t// (4) Update vertex attributes.\n\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, writeMap, dstVertexCount);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, writeMap, dstVertexCount);\n\t\t}\n\t}\n\n\t// (5) Clean up degenerate triangles.\n\n\tcleanPrimitive(prim);\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\tparent: Primitive | PrimitiveTarget,\n\tsrcAttr: Accessor,\n\treorder: number[],\n\tdstCount: number,\n): void {\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstCount * srcAttr.getElementSize());\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\tconst done = new Uint8Array(dstCount);\n\n\tfor (let i = 0, el = [] as number[]; i < reorder.length; i++) {\n\t\tif (!done[reorder[i]]) {\n\t\t\tdstAttr.setElement(reorder[i], srcAttr.getElement(i, el));\n\t\t\tdone[reorder[i]] = 1;\n\t\t}\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n\n\t// Clean up.\n\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n}\n\nconst _a = [] as number[];\nconst _b = [] as number[];\n\n/** Computes a per-attribute tolerance, based on domain and usage of the attribute. */\nfunction getAttributeTolerance(semantic: string, attribute: Accessor, options: Required<WeldOptions>): number {\n\t// Attributes like NORMAL and COLOR_# do not vary in range like POSITION,\n\t// so do not apply the given tolerance factor to these attributes.\n\tif (semantic === 'NORMAL' || semantic === 'TANGENT') return options.toleranceNormal;\n\tif (semantic.startsWith('COLOR_')) return Tolerance.COLOR;\n\tif (semantic.startsWith('TEXCOORD_')) return Tolerance.TEXCOORD;\n\tif (semantic.startsWith('JOINTS_')) return Tolerance.JOINTS;\n\tif (semantic.startsWith('WEIGHTS_')) return Tolerance.WEIGHTS;\n\n\t_a.length = _b.length = 0;\n\tattribute.getMinNormalized(_a);\n\tattribute.getMaxNormalized(_b);\n\tconst diff = _b.map((bi, i) => bi - _a[i]);\n\tconst range = Math.max(...diff);\n\treturn options.tolerance * range;\n}\n\n/** Compares two vertex attributes against a tolerance threshold. */\nfunction compareAttributes(attribute: Accessor, a: number, b: number, tolerance: number, _semantic: string): boolean {\n\tattribute.getElement(a, _a);\n\tattribute.getElement(b, _b);\n\tfor (let i = 0, il = attribute.getElementSize(); i < il; i++) {\n\t\tif (Math.abs(_a[i] - _b[i]) > tolerance) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction formatKV(kv: Record<string, unknown>): string {\n\treturn Object.entries(kv)\n\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t.join(', ');\n}\n\n// Order to search nearer cells first.\nconst CELL_OFFSETS = [0, -1, 1];\n\nfunction getGridNeighborhoodKeys(p: vec3, cellSize: number): string[] {\n\tconst keys = [] as string[];\n\tconst _p = [0, 0, 0] as vec3;\n\tfor (const i of CELL_OFFSETS) {\n\t\tfor (const j of CELL_OFFSETS) {\n\t\t\tfor (const k of CELL_OFFSETS) {\n\t\t\t\t_p[0] = p[0] + i * cellSize;\n\t\t\t\t_p[1] = p[1] + j * cellSize;\n\t\t\t\t_p[2] = p[2] + k * cellSize;\n\t\t\t\tkeys.push(getGridKey(_p, cellSize));\n\t\t\t}\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction getGridKey(p: vec3, cellSize: number): string {\n\tconst cellX = Math.round(p[0] / cellSize);\n\tconst cellY = Math.round(p[1] / cellSize);\n\tconst cellZ = Math.round(p[2] / cellSize);\n\treturn cellX + ':' + cellY + ':' + cellZ;\n}\n\nfunction expandWeldOptions(_options: WeldOptions): Required<WeldOptions> {\n\tconst options = { ...WELD_DEFAULTS, ..._options } as Required<WeldOptions>;\n\n\tif (options.tolerance < 0 || options.tolerance > 0.1) {\n\t\tthrow new Error(`${NAME}: Requires 0 ≤ tolerance ≤ 0.1`);\n\t}\n\n\tif (options.toleranceNormal < 0 || options.toleranceNormal > Math.PI / 2) {\n\t\tthrow new Error(`${NAME}: Requires 0 ≤ toleranceNormal ≤ ${(Math.PI / 2).toFixed(2)}`);\n\t}\n\n\tif (options.tolerance > 0) {\n\t\toptions.tolerance = Math.max(options.tolerance, Number.EPSILON);\n\t\toptions.toleranceNormal = Math.max(options.toleranceNormal, Number.EPSILON);\n\t}\n\n\treturn options;\n}\n","import type { Primitive } from '@gltf-transform/core';\nimport { createIndices } from './utils.js';\n\n/**\n * Removes degenerate triangles from the {@link Primitive}. Any triangle containing fewer than\n * three different vertex indices is considered degenerate. This method does not merge/weld\n * different vertices containing identical data — use {@link weld} first for that purpose.\n *\n * @internal\n */\nexport function cleanPrimitive(prim: Primitive): void {\n\tconst indices = prim.getIndices();\n\tif (!indices) return;\n\n\tconst tmpIndicesArray = [];\n\tlet maxIndex = -Infinity;\n\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst b = indices.getScalar(i + 1);\n\t\tconst c = indices.getScalar(i + 2);\n\n\t\tif (a === b || a === c || b === c) continue;\n\n\t\ttmpIndicesArray.push(a, b, c);\n\t\tmaxIndex = Math.max(maxIndex, a, b, c);\n\t}\n\n\tconst dstIndicesArray = createIndices(tmpIndicesArray.length, maxIndex);\n\tdstIndicesArray.set(tmpIndicesArray);\n\tindices.setArray(dstIndicesArray);\n}\n","import { vec3, vec4, mat4, Accessor, Primitive } from '@gltf-transform/core';\nimport { create as createMat3, fromMat4, invert, transpose } from 'gl-matrix/mat3';\nimport { create as createVec3, normalize as normalizeVec3, transformMat3, transformMat4 } from 'gl-matrix/vec3';\nimport { create as createVec4 } from 'gl-matrix/vec4';\nimport { createIndices } from './utils.js';\nimport { weldPrimitive } from './weld.js';\nimport { determinant } from 'gl-matrix/mat4';\n\n/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * When calling {@link transformPrimitive}, any un-masked vertices are overwritten\n * directly in the underlying vertex streams. If streams should be detached instead,\n * see {@link transformMesh}.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim\n * @param matrix\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformPrimitive(prim: Primitive, matrix: mat4, skipIndices = new Set<number>()): void {\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst indices = (prim.getIndices()?.getArray() || createIndices(position!.getCount())) as Uint32Array;\n\n\t// Apply transform to base attributes.\n\tif (position) {\n\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t}\n\n\tconst normal = prim.getAttribute('NORMAL');\n\tif (normal) {\n\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t}\n\n\tconst tangent = prim.getAttribute('TANGENT');\n\tif (tangent) {\n\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t}\n\n\t// Apply transform to morph attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tconst position = target.getAttribute('POSITION');\n\t\tif (position) {\n\t\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst normal = target.getAttribute('NORMAL');\n\t\tif (normal) {\n\t\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst tangent = target.getAttribute('TANGENT');\n\t\tif (tangent) {\n\t\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t\t}\n\t}\n\n\t// Reverse winding order if scale is negative.\n\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/NegativeScaleTest\n\tif (determinant(matrix) < 0) {\n\t\treversePrimitiveWindingOrder(prim);\n\t}\n\n\t// Update mask.\n\tfor (let i = 0; i < indices.length; i++) skipIndices.add(indices[i]);\n}\n\nfunction applyMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\t// An arbitrary transform may not keep vertex positions in the required\n\t// range of a normalized attribute. Replace the array, instead.\n\tconst dstArray = new Float32Array(attribute.getCount() * 3);\n\tconst elementSize = attribute.getElementSize();\n\n\tfor (let i = 0, el: number[] = [], il = attribute.getCount(); i < il; i++) {\n\t\tdstArray.set(attribute.getElement(i, el), i * elementSize);\n\t}\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat4(vector, vector, matrix);\n\t\tdstArray.set(vector, index * 3);\n\n\t\tskipIndices.add(index);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nfunction applyNormalMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst normalMatrix = createMat3();\n\tfromMat4(normalMatrix, matrix);\n\tinvert(normalMatrix, normalMatrix);\n\ttranspose(normalMatrix, normalMatrix);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat3(vector, vector, normalMatrix);\n\t\tnormalizeVec3(vector, vector);\n\t\tattribute.setElement(index, vector);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction applyTangentMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst v3 = createVec3() as vec3;\n\tconst v4 = createVec4() as vec4;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, v4);\n\n\t\t// mat4 affine matrix applied to vector, vector interpreted as a direction.\n\t\t// Reference: https://github.com/mrdoob/three.js/blob/9f4de99828c05e71c47e6de0beb4c6e7652e486a/src/math/Vector3.js#L286-L300\n\t\tconst [x, y, z] = v4;\n\t\tv3[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z;\n\t\tv3[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z;\n\t\tv3[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z;\n\t\tnormalizeVec3(v3, v3);\n\n\t\t(v4[0] = v3[0]), (v4[1] = v3[1]), (v4[2] = v3[2]);\n\n\t\tattribute.setElement(index, v4);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction reversePrimitiveWindingOrder(prim: Primitive) {\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) return;\n\tif (!prim.getIndices()) weldPrimitive(prim, { tolerance: 0 });\n\n\tconst indices = prim.getIndices()!;\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst c = indices.getScalar(i + 2);\n\t\tindices.setScalar(i, c);\n\t\tindices.setScalar(i + 2, a);\n\t}\n}\n","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import { mat4, Accessor, Primitive, Mesh, PropertyType, PrimitiveTarget } from '@gltf-transform/core';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { deepListAttributes } from './utils.js';\n\n/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * Method:\n * - If any primitives are shared by other meshes, they will be detached.\n * - If any vertex streams are shared by primitives of other meshes, vertex data\n *  will be overwritten unless _overwrite=false_ or the indices are masked. If\n * \t_overwrite=false_, a detached copy of the vertex stream is made before applying\n * \tthe transform.\n * - Primitives within the mesh sharing vertex streams will continue to share those streams.\n * - For indexed primitives, only indexed vertices are modified.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh\n * @param matrix\n * @param overwrite Whether to overwrite vertex streams in place. If false,\n * \t\tstreams shared with other meshes will be detached.\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformMesh(mesh: Mesh, matrix: mat4, overwrite = false, skipIndices?: Set<number>): void {\n\t// (1) Detach shared prims.\n\tfor (const srcPrim of mesh.listPrimitives()) {\n\t\tconst isShared = srcPrim.listParents().some((p) => p.propertyType === PropertyType.MESH && p !== mesh);\n\t\tif (isShared) {\n\t\t\tconst dstPrim = srcPrim.clone();\n\t\t\tmesh.swap(srcPrim, dstPrim);\n\n\t\t\tfor (const srcTarget of dstPrim.listTargets()) {\n\t\t\t\tconst dstTarget = srcTarget.clone();\n\t\t\t\tdstPrim.swap(srcTarget, dstTarget);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (2) Detach shared vertex streams.\n\tif (!overwrite) {\n\t\tconst parents = new Set<Primitive | PrimitiveTarget>([\n\t\t\t...mesh.listPrimitives(),\n\t\t\t...mesh.listPrimitives().flatMap((prim) => prim.listTargets()),\n\t\t]);\n\t\tconst attributes = new Map<Accessor, Accessor>();\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\t\t\tconst isShared = srcAttribute\n\t\t\t\t\t.listParents()\n\t\t\t\t\t.some((a) => (a instanceof Primitive || a instanceof PrimitiveTarget) && !parents.has(a));\n\t\t\t\tif (isShared && !attributes.has(srcAttribute)) {\n\t\t\t\t\tattributes.set(srcAttribute, srcAttribute.clone());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const parent of parents) {\n\t\t\tfor (const [srcAttribute, dstAttribute] of attributes) {\n\t\t\t\tparent.swap(srcAttribute, dstAttribute);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (3) Apply transform.\n\tconst attributeSkipIndices = new Map<Accessor, Set<number>>();\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst position = prim.getAttribute('POSITION')!;\n\n\t\tlet primSkipIndices;\n\t\tif (skipIndices) {\n\t\t\tprimSkipIndices = skipIndices;\n\t\t} else if (attributeSkipIndices.has(position)) {\n\t\t\tprimSkipIndices = attributeSkipIndices.get(position)!;\n\t\t} else {\n\t\t\tattributeSkipIndices.set(position, (primSkipIndices = new Set<number>()));\n\t\t}\n\n\t\ttransformPrimitive(prim, matrix, primSkipIndices);\n\t}\n}\n","import { mat4, MathUtils, Node } from '@gltf-transform/core';\nimport { multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { transformMesh } from './transform-mesh.js';\n\n// prettier-ignore\nconst IDENTITY: mat4 = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n];\n\n/**\n * Clears local transform of the {@link Node}, applying the transform to children and meshes.\n *\n * - Applies transform to children\n * - Applies transform to {@link Mesh mesh}\n * - Resets {@link Light lights}, {@link Camera cameras}, and other attachments to the origin\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeTransform } from '@gltf-transform/functions';\n *\n * node.getTranslation(); // → [ 5, 0, 0 ]\n * node.getMesh(); // → vertex data centered at origin\n *\n * clearNodeTransform(node);\n *\n * node.getTranslation(); // → [ 0, 0, 0 ]\n * node.getMesh(); // → vertex data centered at [ 5, 0, 0 ]\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeTransform(node: Node): Node {\n\tconst mesh = node.getMesh();\n\tconst localMatrix = node.getMatrix();\n\n\tif (mesh && !MathUtils.eq(localMatrix, IDENTITY)) {\n\t\ttransformMesh(mesh, localMatrix);\n\t}\n\n\tfor (const child of node.listChildren()) {\n\t\tconst matrix = child.getMatrix();\n\t\tmultiplyMat4(matrix, matrix, localMatrix);\n\t\tchild.setMatrix(matrix);\n\t}\n\n\treturn node.setMatrix(IDENTITY);\n}\n","import type { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { KHRMeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link KHRMeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * await document.transform(dequantize());\n * ```\n *\n * @category Transforms\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...DEQUANTIZE_DEFAULTS, ..._options } as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(KHRMeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Dequantize a single {@link Primitive}, converting all vertex attributes to float32. Dequantization\n * will increase the size of the mesh on disk and in memory, but may be necessary for compatibility\n * with applications that don't support quantization.\n *\n * Example:\n *\n * ```javascript\n * import { dequantizePrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes().find((mesh) => mesh.getName() === 'MyMesh');\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tdequantizePrimitive(prim);\n * }\n * ```\n */\nexport function dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nexport function dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRDracoMeshCompression } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\nimport { weld } from './weld.js';\n\nconst NAME = 'draco';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: DracoOptions = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link KHRDracoMeshCompression KHR_draco_mesh_compression}.\n * This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link KHRDracoMeshCompression} extension itself.\n *\n * @category Transforms\n */\nexport function draco(_options: DracoOptions = DRACO_DEFAULTS): Transform {\n\tconst options = { ...DRACO_DEFAULTS, ..._options } as Required<DracoOptions>;\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(weld({ tolerance: 0 }));\n\t\tdocument\n\t\t\t.createExtension(KHRDracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? KHRDracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: KHRDracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t});\n}\n","import { Document, Node, PropertyType, Transform } from '@gltf-transform/core';\nimport { clearNodeParent } from './clear-node-parent.js';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'flatten';\n\n/** Options for the {@link flatten} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlattenOptions {}\n\nexport const FLATTEN_DEFAULTS: Required<FlattenOptions> = {};\n\n/**\n * Flattens the scene graph, leaving {@link Node Nodes} with\n * {@link Mesh Meshes}, {@link Camera Cameras}, and other attachments\n * as direct children of the {@link Scene}. Skeletons and their\n * descendants are left in their original Node structure.\n *\n * {@link Animation} targeting a Node or its parents will\n * prevent that Node from being moved.\n *\n * Example:\n *\n * ```ts\n * import { flatten } from '@gltf-transform/functions';\n *\n * await document.transform(flatten());\n * ```\n *\n * @category Transforms\n */\nexport function flatten(_options: FlattenOptions = FLATTEN_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...FLATTEN_DEFAULTS, ..._options } as Required<FlattenOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// (1) Mark joints.\n\t\tconst joints = new Set<Node>();\n\t\tfor (const skin of root.listSkins()) {\n\t\t\tfor (const joint of skin.listJoints()) {\n\t\t\t\tjoints.add(joint);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Mark animated nodes.\n\t\tconst animated = new Set<Node>();\n\t\tfor (const animation of root.listAnimations()) {\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tconst node = channel.getTargetNode();\n\t\t\t\tif (node) {\n\t\t\t\t\tanimated.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Mark descendants of joints and animated nodes.\n\t\tconst hasJointParent = new Set<Node>();\n\t\tconst hasAnimatedParent = new Set<Node>();\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst parent = node.getParentNode();\n\t\t\t\tif (!parent) return;\n\t\t\t\tif (joints.has(parent) || hasJointParent.has(parent)) {\n\t\t\t\t\thasJointParent.add(node);\n\t\t\t\t}\n\t\t\t\tif (animated.has(parent) || hasAnimatedParent.has(parent)) {\n\t\t\t\t\thasAnimatedParent.add(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// (4) For each affected node, in top-down order, clear parents.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tif (animated.has(node)) return;\n\t\t\t\tif (hasJointParent.has(node)) return;\n\t\t\t\tif (hasAnimatedParent.has(node)) return;\n\n\t\t\t\tclearNodeParent(node);\n\t\t\t});\n\t\t}\n\n\t\t// TODO(feat): Transform animation channels, accounting for previously inherited transforms.\n\t\tif (animated.size) {\n\t\t\tlogger.debug(`${NAME}: Flattening node hierarchies with TRS animation not yet supported.`);\n\t\t}\n\n\t\t// (5) Clean up leaf nodes.\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.NODE], keepLeaves: false }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Texture } from '@gltf-transform/core';\n\nconst SRGB_PATTERN = /color|emissive|diffuse/i;\n\n/**\n * Returns the color space (if any) implied by the {@link Material} slots to\n * which a texture is assigned, or null for non-color textures. If the texture\n * is not connected to any {@link Material}, this function will also return\n * null — any metadata in the image file will be ignored.\n *\n * Under current glTF specifications, only 'srgb' and non-color (null) textures\n * are used.\n *\n * Example:\n *\n * ```typescript\n * import { getTextureColorSpace } from '@gltf-transform/functions';\n *\n * const baseColorTexture = material.getBaseColorTexture();\n * const normalTexture = material.getNormalTexture();\n *\n * getTextureColorSpace(baseColorTexture); // → 'srgb'\n * getTextureColorSpace(normalTexture); // → null\n * ```\n */\nexport function getTextureColorSpace(texture: Texture): string | null {\n\tconst graph = texture.getGraph();\n\tconst edges = graph.listParentEdges(texture);\n\tconst isSRGB = edges.some((edge) => {\n\t\treturn edge.getAttributes().isColor || SRGB_PATTERN.test(edge.getName());\n\t});\n\treturn isSRGB ? 'srgb' : null;\n}\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tgetBounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils.js';\nimport { KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC, read as readKTX } from 'ktx-parse';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = getBounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tlet verts = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: verts,\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\tlet compression = '';\n\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\tconst container = readKTX(texture.getImage()!);\n\t\t\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\t\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\t\t\tcompression = 'ETC1S';\n\t\t\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\t\t\tcompression = 'UASTC';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tcompression,\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getVRAMByteLength(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tcompression: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Primitive, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, EXTMeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'instance';\n\nexport interface InstanceOptions {\n\t/** Minimum number of meshes considered eligible for instancing. Default: 2. */\n\tmin?: number;\n}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {\n\tmin: 2,\n};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. In\n * engines supporting the extension, reused Meshes will be drawn with GPU instancing, greatly\n * reducing draw calls and improving performance in many cases. If you're not sure that identical\n * Meshes share vertex data and materials (\"linked duplicates\"), run {@link dedup} first to link them.\n *\n * Example:\n *\n * ```javascript\n * import { dedup, instance } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup(),\n * \tinstance({min: 2}),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\tconst options = { ...INSTANCE_DEFAULTS, ..._options } as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tif (root.listAnimations().length) {\n\t\t\tlogger.warn(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst batchExtension = doc.createExtension(EXTMeshGPUInstancing);\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < options.min) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\t// Cannot preserve volumetric effects when instancing with varying scale.\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/AttenuationTest\n\t\t\t\tif (mesh.listPrimitives().some(hasVolume) && nodes.some(hasScale)) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with ≥${options.min} parent nodes were found.`);\n\t\t}\n\n\t\tif (batchExtension.listProperties().length === 0) {\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParentNode();\n\t\tif (nodeParent) nodes.push(nodeParent);\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction hasVolume(prim: Primitive) {\n\tconst material = prim.getMaterial();\n\treturn !!(material && material.getExtension('KHR_materials_volume'));\n}\n\nfunction hasScale(node: Node) {\n\tconst scale = node.getWorldScale();\n\treturn !MathUtils.eq(scale, [1, 1, 1]);\n}\n\nfunction createBatch(doc: Document, batchExtension: EXTMeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Primitive, ComponentTypeToTypedArray } from '@gltf-transform/core';\nimport { createIndices, createPrimGroupKey } from './utils.js';\n\ninterface JoinPrimitiveOptions {\n\tskipValidation?: boolean;\n}\n\nconst JOIN_PRIMITIVE_DEFAULTS: Required<JoinPrimitiveOptions> = {\n\tskipValidation: false,\n};\n\n/**\n * Given a list of compatible Mesh {@link Primitive Primitives}, returns new Primitive\n * containing their vertex data. Compatibility requires that all Primitives share the\n * same {@link Material Materials}, draw mode, and vertex attribute types. Primitives\n * using morph targets cannot currently be joined.\n *\n * Example:\n *\n * ```javascript\n * import { joinPrimitives } from '@gltf-transform/functions';\n *\n * // Succeeds if Primitives are compatible, or throws an error.\n * const result = joinPrimitives(mesh.listPrimitives());\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tprim.dispose();\n * }\n *\n * mesh.addPrimitive(result);\n * ```\n */\nexport function joinPrimitives(prims: Primitive[], options: JoinPrimitiveOptions = {}): Primitive {\n\toptions = { ...JOIN_PRIMITIVE_DEFAULTS, ...options };\n\tconst templatePrim = prims[0]!;\n\tconst document = Document.fromGraph(templatePrim.getGraph())!;\n\n\t// (1) Validation.\n\tif (!options.skipValidation && new Set(prims.map(createPrimGroupKey)).size > 1) {\n\t\tthrow new Error(\n\t\t\t'' +\n\t\t\t\t'Requires ≥2 Primitives, sharing the same Material ' +\n\t\t\t\t'and Mode, with compatible vertex attributes and indices.',\n\t\t);\n\t}\n\n\tconst remapList = [] as Uint32Array[]; // remap[srcIndex] → dstIndex, by prim\n\tconst countList = [] as number[]; // vertex count, by prim\n\tconst indicesList = [] as (Uint32Array | Uint16Array)[]; // indices, by prim\n\n\tlet dstVertexCount = 0;\n\tlet dstIndicesCount = 0;\n\n\t// (2) Build remap lists.\n\tfor (const srcPrim of prims) {\n\t\tconst indices = _getOrCreateIndices(srcPrim);\n\t\tconst remap = [];\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tconst index = indices[i];\n\t\t\tif (remap[index] === undefined) {\n\t\t\t\tremap[index] = dstVertexCount++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tdstIndicesCount++;\n\t\t}\n\t\tremapList.push(new Uint32Array(remap));\n\t\tcountList.push(count);\n\t\tindicesList.push(indices);\n\t}\n\n\t// (3) Allocate joined attributes.\n\tconst dstPrim = document.createPrimitive().setMode(templatePrim.getMode()).setMaterial(templatePrim.getMaterial());\n\tfor (const semantic of templatePrim.listSemantics()) {\n\t\tconst tplAttribute = templatePrim.getAttribute(semantic)!;\n\t\tconst AttributeArray = ComponentTypeToTypedArray[tplAttribute.getComponentType()];\n\t\tconst dstAttribute = document\n\t\t\t.createAccessor()\n\t\t\t.setType(tplAttribute.getType())\n\t\t\t.setBuffer(tplAttribute.getBuffer())\n\t\t\t.setNormalized(tplAttribute.getNormalized())\n\t\t\t.setArray(new AttributeArray(dstVertexCount * tplAttribute.getElementSize()));\n\t\tdstPrim.setAttribute(semantic, dstAttribute);\n\t}\n\n\t// (4) Allocate joined indices.\n\tconst dstIndicesArray = templatePrim.getIndices() ? createIndices(dstVertexCount) : null;\n\tconst dstIndices =\n\t\tdstIndicesArray &&\n\t\tdocument\n\t\t\t.createAccessor()\n\t\t\t.setBuffer(templatePrim.getIndices()!.getBuffer())\n\t\t\t.setArray(createIndices(dstIndicesCount, dstVertexCount));\n\tdstPrim.setIndices(dstIndices);\n\n\t// (5) Remap attributes into joined Primitive.\n\tlet dstNextIndex = 0;\n\tfor (let primIndex = 0; primIndex < remapList.length; primIndex++) {\n\t\tconst srcPrim = prims[primIndex];\n\t\tconst remap = remapList[primIndex];\n\t\tconst indicesArray = indicesList[primIndex];\n\n\t\tconst primStartIndex = dstNextIndex;\n\t\tlet primNextIndex = primStartIndex;\n\n\t\tfor (const semantic of dstPrim.listSemantics()) {\n\t\t\tconst srcAttribute = srcPrim.getAttribute(semantic)!;\n\t\t\tconst dstAttribute = dstPrim.getAttribute(semantic)!;\n\t\t\tconst el = [] as number[];\n\n\t\t\tprimNextIndex = primStartIndex;\n\t\t\tfor (let i = 0; i < indicesArray.length; i++) {\n\t\t\t\tconst index = indicesArray[i];\n\t\t\t\tsrcAttribute.getElement(index, el);\n\t\t\t\tdstAttribute.setElement(remap[index], el);\n\t\t\t\tif (dstIndices) {\n\t\t\t\t\tdstIndices.setScalar(primNextIndex++, remap[index]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdstNextIndex = primNextIndex;\n\t}\n\n\treturn dstPrim;\n}\n\nfunction _getOrCreateIndices(prim: Primitive): Uint16Array | Uint32Array {\n\tconst indices = prim.getIndices();\n\tif (indices) return indices.getArray() as Uint32Array | Uint16Array;\n\tconst position = prim.getAttribute('POSITION')!;\n\treturn createIndices(position.getCount());\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPropertyType,\n\tScene,\n\tTransform,\n} from '@gltf-transform/core';\nimport { invert, multiply } from 'gl-matrix/mat4';\nimport { joinPrimitives } from './join-primitives.js';\nimport { prune } from './prune.js';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { createPrimGroupKey, createTransform, formatLong, isUsed } from './utils.js';\nimport { dequantizeAttribute } from './dequantize.js';\n\nconst NAME = 'join';\n\nconst { ROOT, NODE, MESH, PRIMITIVE, ACCESSOR } = PropertyType;\n\n// prettier-ignore\nconst _matrix = [\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n] as mat4;\n\n/** Options for the {@link join} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface JoinOptions {\n\t/**\n\t * Prevents joining distinct {@link Mesh Meshes} and {@link Node Nodes}.\n\t * Joins only Primitives found within the same parent Mesh. To preserve\n\t * only _named_ Nodes and Meshes, use\n\t * {@link JoinOptions.keepNamed keepNamed} instead. Default: false.\n\t */\n\tkeepMeshes: boolean;\n\t/**\n\t * Prevents joining _named_ {@link Mesh Meshes} and {@link Node Nodes}.\n\t * If {@link JoinOptions.keepMeshes keepMeshes} is enabled, keepNamed will\n\t * have no effect. Default: false.\n\t */\n\tkeepNamed: boolean;\n}\n\nexport const JOIN_DEFAULTS: Required<JoinOptions> = {\n\tkeepMeshes: false,\n\tkeepNamed: false,\n};\n\n/**\n * Joins compatible {@link Primitive Primitives} and reduces draw calls.\n * Primitives are eligible for joining if they are members of the same\n * {@link Mesh} or, optionally, attached to sibling {@link Node Nodes}\n * in the scene hierarchy. For best results, apply {@link dedup} and\n * {@link flatten} first to maximize the number of Primitives that\n * can be joined.\n *\n * NOTE: In a Scene that heavily reuses the same Mesh data, joining may\n * increase vertex count. Consider alternatives, like\n * {@link instance instancing} with {@link EXTMeshGPUInstancing}.\n *\n * Example:\n *\n * ```ts\n * import { PropertyType } from '@gltf-transform/core';\n * import { join, flatten, dedup } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup({ propertyTypes: [PropertyType.MATERIAL] }),\n * \tflatten(),\n * \tjoin({ keepNamed: false }),\n * );\n * ```\n *\n * @category Transforms\n */\nexport function join(_options: JoinOptions = JOIN_DEFAULTS): Transform {\n\tconst options = { ...JOIN_DEFAULTS, ..._options } as Required<JoinOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// Join.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t_joinLevel(document, scene, options);\n\t\t\tscene.traverse((node) => _joinLevel(document, node, options));\n\t\t}\n\n\t\t// Clean up.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [NODE, MESH, PRIMITIVE, ACCESSOR],\n\t\t\t\tkeepLeaves: false,\n\t\t\t\tkeepAttributes: true,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\ninterface IJoinGroup {\n\tkey: string;\n\tprims: Primitive[];\n\tprimMeshes: Mesh[];\n\tprimNodes: Node[];\n\tdstNode: Node;\n\tdstMesh?: Mesh | undefined;\n}\n\nfunction _joinLevel(document: Document, parent: Node | Scene, options: Required<JoinOptions>) {\n\tconst logger = document.getLogger();\n\tconst groups = {} as Record<string, IJoinGroup>;\n\n\t// Scan for compatible Primitives.\n\tconst children = parent.listChildren();\n\tfor (let nodeIndex = 0; nodeIndex < children.length; nodeIndex++) {\n\t\tconst node = children[nodeIndex];\n\n\t\t// Skip animated nodes.\n\t\tconst isAnimated = node.listParents().some((p) => p instanceof AnimationChannel);\n\t\tif (isAnimated) continue;\n\n\t\t// Skip nodes without meshes.\n\t\tconst mesh = node.getMesh();\n\t\tif (!mesh) continue;\n\n\t\t// Skip nodes with instancing; unsupported.\n\t\tif (node.getExtension('EXT_mesh_gpu_instancing')) continue;\n\n\t\t// Skip nodes with skinning; unsupported.\n\t\tif (node.getSkin()) continue;\n\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t// Skip prims with morph targets; unsupported.\n\t\t\tif (prim.listTargets().length > 0) continue;\n\n\t\t\t// Skip prims with volumetric materials; unsupported.\n\t\t\tconst material = prim.getMaterial();\n\t\t\tif (material && material.getExtension('KHR_materials_volume')) continue;\n\n\t\t\tdequantizeTransformableAttributes(prim);\n\n\t\t\tlet key = createPrimGroupKey(prim);\n\n\t\t\tconst isNamed = mesh.getName() || node.getName();\n\t\t\tif (options.keepMeshes || (options.keepNamed && isNamed)) {\n\t\t\t\tkey += `|${nodeIndex}`;\n\t\t\t}\n\n\t\t\tif (!(key in groups)) {\n\t\t\t\tgroups[key] = {\n\t\t\t\t\tprims: [] as Primitive[],\n\t\t\t\t\tprimMeshes: [] as Mesh[],\n\t\t\t\t\tprimNodes: [] as Node[],\n\t\t\t\t\tdstNode: node,\n\t\t\t\t\tdstMesh: undefined,\n\t\t\t\t} as IJoinGroup;\n\t\t\t}\n\n\t\t\tconst group = groups[key];\n\t\t\tgroup.prims.push(prim);\n\t\t\tgroup.primNodes.push(node);\n\t\t}\n\t}\n\n\t// Discard single-Primitive groups.\n\tconst joinGroups = Object.values(groups).filter(({ prims }) => prims.length > 1);\n\n\t// Unlink all affected Meshes at current level, before modifying Primitives.\n\tconst srcNodes = new Set<Node>(joinGroups.flatMap((group) => group.primNodes));\n\tfor (const node of srcNodes) {\n\t\tconst mesh = node.getMesh()!;\n\t\tconst isSharedMesh = mesh.listParents().some((parent) => {\n\t\t\treturn parent.propertyType !== ROOT && node !== parent;\n\t\t});\n\t\tif (isSharedMesh) {\n\t\t\tnode.setMesh(mesh.clone());\n\t\t}\n\t}\n\n\t// Update Meshes in groups.\n\tfor (const group of joinGroups) {\n\t\tconst { dstNode, primNodes } = group;\n\t\tgroup.dstMesh = dstNode.getMesh()!;\n\t\tgroup.primMeshes = primNodes.map((node) => node.getMesh()!);\n\t}\n\n\t// Join Primitives.\n\tfor (const group of joinGroups) {\n\t\tconst { prims, primNodes, primMeshes, dstNode, dstMesh } = group as Required<IJoinGroup>;\n\t\tconst dstMatrix = dstNode.getMatrix();\n\n\t\tfor (let i = 0; i < prims.length; i++) {\n\t\t\tconst primNode = primNodes[i];\n\t\t\tconst primMesh = primMeshes[i];\n\n\t\t\tlet prim = prims[i];\n\t\t\tprimMesh.removePrimitive(prim);\n\n\t\t\t// Primitives may be reused directly, or their attributes may be\n\t\t\t// used in another Primitive with a different Material.\n\t\t\tif (isUsed(prim) || hasSharedAttributes(prim)) {\n\t\t\t\tprim = prims[i] = _deepClonePrimitive(prims[i]);\n\t\t\t}\n\n\t\t\t// Transform Primitive into new local coordinate space.\n\t\t\tif (primNode !== dstNode) {\n\t\t\t\tmultiply(_matrix, invert(_matrix, dstMatrix), primNode.getMatrix());\n\t\t\t\ttransformPrimitive(prim, _matrix);\n\t\t\t}\n\t\t}\n\n\t\tconst dstPrim = joinPrimitives(prims);\n\t\tconst dstVertexCount = dstPrim.listAttributes()[0].getCount();\n\t\tdstMesh.addPrimitive(dstPrim);\n\n\t\tlogger.debug(\n\t\t\t`${NAME}: Joined Primitives (${prims.length}) containing ` +\n\t\t\t\t`${formatLong(dstVertexCount)} vertices under Node \"${dstNode.getName()}\".`,\n\t\t);\n\t}\n}\n\nfunction _deepClonePrimitive(src: Primitive): Primitive {\n\tconst dst = src.clone();\n\tfor (const semantic of dst.listSemantics()) {\n\t\tdst.setAttribute(semantic, dst.getAttribute(semantic)!.clone());\n\t}\n\tconst indices = dst.getIndices();\n\tif (indices) dst.setIndices(indices.clone());\n\treturn dst;\n}\n\nfunction hasSharedAttributes(prim: Primitive): boolean {\n\tfor (const attribute of prim.listAttributes()) {\n\t\tfor (const parent of attribute.listParents()) {\n\t\t\tif (parent !== prim && parent.propertyType !== ROOT) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Dequantize attributes that would be affected by {@link transformPrimitive},\n * to avoid invalidating our primitive group keys.\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/844\n */\nfunction dequantizeTransformableAttributes(prim: Primitive) {\n\tfor (const semantic of ['POSITION', 'NORMAL', 'TANGENT']) {\n\t\tconst attribute = prim.getAttribute(semantic);\n\t\tif (attribute && attribute.getComponentSize() < 4) {\n\t\t\tdequantizeAttribute(semantic, attribute, { pattern: /.*/ });\n\t\t}\n\t}\n}\n","import { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function listTextureChannels(texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(texture: Texture): number {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(texture: Texture): string[] {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tconst root = document.getRoot();\n\tconst slots = texture\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform, deepListAttributes, remapAttribute, SetMap } from './utils.js';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: unknown;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = { ...REORDER_DEFAULTS, ..._options } as Required<ReorderOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n/** @hidden */\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n *\n * @hidden\n */\nfunction createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, GLTF, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexArray(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexArray(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// Would prefer to warn if unsafe, but no logger accessible in this scope.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst normalizedComponentType = normalized ? componentType : undefined;\n\tconst delta = normalized ? MathUtils.decodeNormalizedInt(1, componentType) : Number.EPSILON;\n\tconst joints = new Uint32Array(setCount * 4).fill(0);\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'JOINTS', joints);\n\t\tgetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\n\t\tlet weightsSum = sum(weights, normalizedComponentType);\n\t\tif (weightsSum === 0) continue;\n\n\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\tif (normalized) {\n\t\t\t\t\tconst intValue = MathUtils.encodeNormalizedInt(weights[j] / weightsSum, componentType);\n\t\t\t\t\tweights[j] = MathUtils.decodeNormalizedInt(intValue, componentType);\n\t\t\t\t} else {\n\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tweightsSum = sum(weights, normalizedComponentType);\n\n\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t// in least-significant weight.\n\t\tif (normalized && weightsSum !== 1) {\n\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\tweights[j] += MathUtils.encodeNormalizedInt(1 - weightsSum, componentType);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Remove joint indices whose weights have fallen to zero.\n\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\tif (weights[j] === 0) {\n\t\t\t\tjoints[j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'JOINTS', joints);\n\t\tsetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\ttarget: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\ttarget[i * 4 + j] = MathUtils.encodeNormalizedInt(el[j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\ttarget[i * 4 + j] = el[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\tvalues: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\tel[j] = MathUtils.decodeNormalizedInt(values[i * 4 + j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\tel[j] = values[i * 4 + j];\n\t\t\t}\n\t\t}\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray, normalizedComponentType?: GLTF.AccessorComponentType): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tif (normalizedComponentType) {\n\t\t\tsum += MathUtils.decodeNormalizedInt(values[i], normalizedComponentType);\n\t\t} else {\n\t\t\tsum += values[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMathUtils,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { InstancedMesh, KHRMeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\nimport { sortPrimitiveWeights } from './sort-primitive-weights.js';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n *\n * @category Transforms\n */\nexport function quantize(_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(KHRMeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL, PropertyType.SKIN] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tconst skin = parent.getSkin();\n\t\tif (skin) {\n\t\t\tparent.setSkin(transformSkin(skin, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst batch = parent.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\tif (batch) {\n\t\t\tparent.setExtension('EXT_mesh_gpu_instancing', transformBatch(batch, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone(); // quantize() does cleanup.\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale and offset to GPU instancing batches. */\nfunction transformBatch(batch: InstancedMesh, nodeTransform: VectorTransform<vec3>): InstancedMesh {\n\tif (!batch.getAttribute('TRANSLATION') && !batch.getAttribute('ROTATION') && !batch.getAttribute('SCALE')) {\n\t\treturn batch;\n\t}\n\n\tbatch = batch.clone(); // quantize() does cleanup.\n\tconst instanceTranslation = batch.getAttribute('TRANSLATION')?.clone();\n\tconst instanceRotation = batch.getAttribute('ROTATION')?.clone();\n\tconst instanceScale = batch.getAttribute('SCALE')?.clone();\n\tconst tpl = (instanceTranslation || instanceRotation || instanceScale)!;\n\n\tconst T_IDENTITY = [0, 0, 0] as vec3;\n\tconst R_IDENTITY = [0, 0, 0, 1] as vec4;\n\tconst S_IDENTITY = [1, 1, 1] as vec3;\n\n\tconst t = [0, 0, 0] as vec3;\n\tconst r = [0, 0, 0, 1] as vec4;\n\tconst s = [1, 1, 1] as vec3;\n\n\t// prettier-ignore\n\tconst instanceMatrix = [\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1,\n\t] as mat4;\n\n\tconst transformMatrix = fromTransform(nodeTransform);\n\n\tfor (let i = 0, count = tpl.getCount(); i < count; i++) {\n\t\tMathUtils.compose(\n\t\t\tinstanceTranslation ? (instanceTranslation.getElement(i, t) as vec3) : T_IDENTITY,\n\t\t\tinstanceRotation ? (instanceRotation.getElement(i, r) as vec4) : R_IDENTITY,\n\t\t\tinstanceScale ? (instanceScale.getElement(i, s) as vec3) : S_IDENTITY,\n\t\t\tinstanceMatrix\n\t\t);\n\n\t\tmultiplyMat4(instanceMatrix, instanceMatrix, transformMatrix);\n\n\t\tMathUtils.decompose(instanceMatrix, t, r, s);\n\n\t\tif (instanceTranslation) instanceTranslation.setElement(i, t);\n\t\tif (instanceRotation) instanceRotation.setElement(i, r);\n\t\tif (instanceScale) instanceScale.setElement(i, s);\n\t}\n\n\tif (instanceTranslation) batch.setAttribute('TRANSLATION', instanceTranslation);\n\tif (instanceRotation) batch.setAttribute('ROTATION', instanceRotation);\n\tif (instanceScale) batch.setAttribute('SCALE', instanceScale);\n\n\treturn batch;\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// quantize() does cleanup.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\t// TODO(feat): Support sparse accessors, https://github.com/donmccurdy/glTF-Transform/issues/795\n\tattribute.setArray(dstArray).setNormalized(true).setSparse(false);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { EXTMeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder.js';\nimport { quantize } from './quantize.js';\nimport { createTransform } from './utils.js';\n\nexport interface MeshoptOptions {\n\tencoder: unknown;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = { level: 'high' };\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link EXTMeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link EXTMeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function meshopt(_options: MeshoptOptions): Transform {\n\tconst options = { ...MESHOPT_DEFAULTS, ..._options } as Required<MeshoptOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t\t\tpattern: options.level === 'medium' ? /.*/ : /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/,\n\t\t\t\tquantizePosition: 14,\n\t\t\t\tquantizeTexcoord: 12,\n\t\t\t\tquantizeColor: 8,\n\t\t\t\tquantizeNormal: 8,\n\t\t\t})\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(EXTMeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? EXTMeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: EXTMeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t});\n}\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tKHRMaterialsIOR,\n\tKHRMaterialsPBRSpecularGlossiness,\n\tKHRMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils.js';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...METALROUGH_DEFAULTS, ..._options } as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(KHRMaterialsIOR);\n\t\tconst specExtension = doc.createExtension(KHRMaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(KHRMaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, ILogger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp } from './utils.js';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n *\n * @category Transforms\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNWELD_DEFAULTS, ..._options } as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\t\t\t\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tlogger: ILogger,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as new (len: number) => TypedArray;\n\tdstAttribute.setArray(new ArrayCtor(indices.getCount() * srcAttribute.getElementSize()));\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld.js';\nimport { createTransform } from './utils.js';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n *\n * @category Transforms\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = { ...NORMALS_DEFAULTS, ..._options } as Required<NormalsOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import {\n\tColorUtils,\n\tDocument,\n\tMaterial,\n\tPrimitive,\n\tPropertyType,\n\tTexture,\n\tTextureInfo,\n\tTransform,\n\tvec4,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\nimport { prune } from './prune.js';\nimport ndarray, { NdArray, TypedArray } from 'ndarray';\nimport { savePixels } from 'ndarray-pixels';\n\nconst NAME = 'palette';\n\ntype TexturableProp = 'baseColor' | 'emissive' | 'metallicRoughness';\n\nexport interface PaletteOptions {\n\t/** Size (in pixels) of a single block within each palette texture. Default: 4. */\n\tblockSize?: number;\n\t/**\n\t * Minimum number of blocks in the palette texture. If fewer unique\n\t * material values are found, no palettes will be generated. Default: 2.\n\t */\n\tmin?: number;\n}\n\nexport const PALETTE_DEFAULTS: Required<PaletteOptions> = {\n\tblockSize: 4,\n\tmin: 2,\n};\n\n/**\n * Creates palette textures containing all unique values of scalar\n * {@link Material} properties within the scene, then merges materials. For\n * scenes with many solid-colored materials (often found in CAD, architectural,\n * or low-poly styles), texture palettes can reduce the number of materials\n * used, and significantly increase the number of {@link Mesh} objects eligible\n * for {@link join} operations.\n *\n * Materials already containing texture coordinates (UVs) are not eligible for\n * texture palette optimizations. Currently only a material's base color,\n * alpha, emissive factor, metallic factor, and roughness factor are converted\n * to palette textures.\n *\n * Example:\n *\n * ```typescript\n * import { palette, flatten, dequantize, join } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tpalette({ min: 5 }),\n * \tflatten(),\n * \tdequantize(),\n * \tjoin()\n * );\n * ```\n *\n * The illustration below shows a typical base color palette texture:\n *\n * <img\n * \tsrc=\"/media/functions/palette.png\"\n * \talt=\"Row of colored blocks\"\n * \tstyle=\"width: 100%; max-width: 320px; image-rendering: pixelated;\">\n *\n * @category Transforms\n */\nexport function palette(_options: PaletteOptions = PALETTE_DEFAULTS): Transform {\n\tconst options = { ...PALETTE_DEFAULTS, ..._options } as Required<PaletteOptions>;\n\tconst blockSize = Math.max(options.blockSize, 1);\n\tconst min = Math.max(options.min, 1);\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst root = document.getRoot();\n\n\t\t// Find and remove unused TEXCOORD_n attributes.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tkeepAttributes: false,\n\t\t\t\tkeepLeaves: true,\n\t\t\t\tpropertyTypes: [PropertyType.ACCESSOR],\n\t\t\t})\n\t\t);\n\n\t\tconst prims = new Set<Primitive>();\n\t\tconst materials = new Set<Material>();\n\n\t\t// (1) Gather list of eligible prims and materials.\n\n\t\tfor (const mesh of root.listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst material = prim.getMaterial();\n\t\t\t\tif (!material || !!prim.getAttribute('TEXCOORD_0')) continue;\n\n\t\t\t\tprims.add(prim);\n\t\t\t\tmaterials.add(material);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Gather list of distinct material properties.\n\n\t\tconst materialKeys = new Set<string>();\n\t\tconst materialKeyMap = new Map<Material, string>();\n\t\tconst materialProps: Record<TexturableProp, Set<string>> = {\n\t\t\tbaseColor: new Set<string>(),\n\t\t\temissive: new Set<string>(),\n\t\t\tmetallicRoughness: new Set<string>(),\n\t\t};\n\n\t\tfor (const material of materials) {\n\t\t\tconst baseColor = encodeRGBA(material.getBaseColorFactor().slice() as vec4);\n\t\t\tconst emissive = encodeRGBA([...material.getEmissiveFactor(), 1]);\n\t\t\tconst roughness = encodeFloat(material.getRoughnessFactor());\n\t\t\tconst metallic = encodeFloat(material.getMetallicFactor());\n\t\t\tconst key = `baseColor:${baseColor},emissive:${emissive},metallicRoughness:${metallic}${roughness}`;\n\t\t\tmaterialProps.baseColor.add(baseColor);\n\t\t\tmaterialProps.emissive.add(emissive);\n\t\t\tmaterialProps.metallicRoughness.add(metallic + '+' + roughness);\n\t\t\tmaterialKeys.add(key);\n\t\t\tmaterialKeyMap.set(material, key);\n\t\t}\n\n\t\t// logger.debug(`${NAME}:\\n${Array.from(materialKeys.values()).join('\\n')}`);\n\n\t\tconst keyCount = materialKeys.size;\n\t\tif (keyCount < min) {\n\t\t\tlogger.debug(`${NAME}: Found <${min} unique material properties. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (3) Allocate palette textures.\n\n\t\tconst w = ceilPowerOfTwo(keyCount * blockSize);\n\t\tconst h = ceilPowerOfTwo(blockSize);\n\t\tconst padWidth = w - keyCount * blockSize;\n\n\t\tconst paletteTexturePixels: Record<TexturableProp, NdArray<Uint8Array> | null> = {\n\t\t\tbaseColor: null,\n\t\t\temissive: null,\n\t\t\tmetallicRoughness: null,\n\t\t};\n\n\t\t// Properties skipped for material equality comparisons.\n\t\tconst skipProps = new Set(['name', 'extras']);\n\t\tconst skip = (...props: string[]) => props.forEach((prop) => skipProps.add(prop));\n\n\t\tlet baseColorTexture: Texture | null = null;\n\t\tlet emissiveTexture: Texture | null = null;\n\t\tlet metallicRoughnessTexture: Texture | null = null;\n\n\t\tif (materialProps.baseColor.size >= min) {\n\t\t\tconst name = 'PaletteBaseColor';\n\t\t\tbaseColorTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.baseColor = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('baseColorFactor', 'baseColorTexture', 'baseColorTextureInfo');\n\t\t}\n\t\tif (materialProps.emissive.size >= min) {\n\t\t\tconst name = 'PaletteEmissive';\n\t\t\temissiveTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.emissive = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('emissiveFactor', 'emissiveTexture', 'emissiveTextureInfo');\n\t\t}\n\t\tif (materialProps.metallicRoughness.size >= min) {\n\t\t\tconst name = 'PaletteMetallicRoughness';\n\t\t\tmetallicRoughnessTexture = document.createTexture(name).setURI(`${name}.png`);\n\t\t\tpaletteTexturePixels.metallicRoughness = ndarray(new Uint8Array(w * h * 4), [w, h, 4]);\n\t\t\tskip('metallicFactor', 'roughnessFactor', 'metallicRoughnessTexture', 'metallicRoughnessTextureInfo');\n\t\t}\n\n\t\tif (!(baseColorTexture || emissiveTexture || metallicRoughnessTexture)) {\n\t\t\tlogger.debug(`${NAME}: No material property has ≥${min} unique values. Exiting.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// (4) Write blocks to palette textures.\n\n\t\tconst visitedKeys = new Set<string>();\n\t\tconst materialIndices = new Map<string, number>();\n\t\tconst paletteMaterials: Material[] = [];\n\n\t\tlet nextIndex = 0;\n\t\tfor (const material of materials) {\n\t\t\tconst key = materialKeyMap.get(material)!;\n\t\t\tif (visitedKeys.has(key)) continue;\n\n\t\t\tconst index = nextIndex++;\n\n\t\t\tif (paletteTexturePixels.baseColor) {\n\t\t\t\tconst pixels = paletteTexturePixels.baseColor;\n\t\t\t\tconst baseColor = [...material.getBaseColorFactor()] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(baseColor, baseColor);\n\t\t\t\twriteBlock(pixels, index, baseColor, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.emissive) {\n\t\t\t\tconst pixels = paletteTexturePixels.emissive;\n\t\t\t\tconst emissive = [...material.getEmissiveFactor(), 1] as vec4;\n\t\t\t\tColorUtils.convertLinearToSRGB(emissive, emissive);\n\t\t\t\twriteBlock(pixels, index, emissive, blockSize);\n\t\t\t}\n\t\t\tif (paletteTexturePixels.metallicRoughness) {\n\t\t\t\tconst pixels = paletteTexturePixels.metallicRoughness;\n\t\t\t\tconst metallic = material.getMetallicFactor();\n\t\t\t\tconst roughness = material.getRoughnessFactor();\n\t\t\t\twriteBlock(pixels, index, [0, roughness, metallic, 1], blockSize);\n\t\t\t}\n\n\t\t\tvisitedKeys.add(key);\n\t\t\tmaterialIndices.set(key, index);\n\t\t}\n\n\t\t// (5) Compress palette textures and assign to palette materials.\n\n\t\tconst mimeType = 'image/png';\n\n\t\tif (baseColorTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.baseColor!, mimeType);\n\t\t\tbaseColorTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (emissiveTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.emissive!, mimeType);\n\t\t\temissiveTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\t\tif (metallicRoughnessTexture) {\n\t\t\tconst image = await savePixels(paletteTexturePixels.metallicRoughness!, mimeType);\n\t\t\tmetallicRoughnessTexture.setImage(image).setMimeType(mimeType);\n\t\t}\n\n\t\t// (6) Create palette materials, generate UVs, and assign both to prims.\n\n\t\tlet nextPaletteMaterialIndex = 1;\n\t\tfor (const prim of prims) {\n\t\t\tconst srcMaterial = prim.getMaterial()!;\n\t\t\tconst key = materialKeyMap.get(srcMaterial)!;\n\t\t\tconst blockIndex = materialIndices.get(key)!;\n\n\t\t\t// UVs are centered horizontally in each block, descending vertically\n\t\t\t// to form a diagonal line in the UV layout. Easy and compressible.\n\t\t\tconst baseUV = (blockIndex + 0.5) / keyCount;\n\t\t\tconst padUV = (baseUV * (w - padWidth)) / w;\n\n\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\tconst buffer = position.getBuffer();\n\t\t\tconst array = new Float32Array(position.getCount() * 2).fill(padUV);\n\t\t\tconst uv = document.createAccessor().setType('VEC2').setArray(array).setBuffer(buffer);\n\n\t\t\tlet dstMaterial;\n\t\t\tfor (const material of paletteMaterials) {\n\t\t\t\tif (material.equals(srcMaterial, skipProps)) {\n\t\t\t\t\tdstMaterial = material;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!dstMaterial) {\n\t\t\t\tconst suffix = (nextPaletteMaterialIndex++).toString().padStart(3, '0');\n\t\t\t\tdstMaterial = srcMaterial.clone().setName(`PaletteMaterial${suffix}`);\n\n\t\t\t\tif (baseColorTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setBaseColorFactor([1, 1, 1, 1])\n\t\t\t\t\t\t.setBaseColorTexture(baseColorTexture)\n\t\t\t\t\t\t.getBaseColorTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (emissiveTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setEmissiveFactor([1, 1, 1])\n\t\t\t\t\t\t.setEmissiveTexture(emissiveTexture)\n\t\t\t\t\t\t.getEmissiveTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\t\t\t\tif (metallicRoughnessTexture) {\n\t\t\t\t\tdstMaterial\n\t\t\t\t\t\t.setMetallicFactor(1)\n\t\t\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t\t\t.setMetallicRoughnessTexture(metallicRoughnessTexture)\n\t\t\t\t\t\t.getMetallicRoughnessTextureInfo()!\n\t\t\t\t\t\t.setMinFilter(TextureInfo.MinFilter.NEAREST)\n\t\t\t\t\t\t.setMagFilter(TextureInfo.MagFilter.NEAREST);\n\t\t\t\t}\n\n\t\t\t\tpaletteMaterials.push(dstMaterial);\n\t\t\t}\n\n\t\t\tprim.setMaterial(dstMaterial).setAttribute('TEXCOORD_0', uv);\n\t\t}\n\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.MATERIAL] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Encodes a floating-point value on the interval [0,1] at 8-bit precision. */\nfunction encodeFloat(value: number): string {\n\tconst hex = Math.round(value * 255).toString(16);\n\treturn hex.length === 1 ? '0' + hex : hex;\n}\n\n/** Encodes an RGBA color in Linear-sRGB-D65 color space. */\nfunction encodeRGBA(value: vec4): string {\n\tColorUtils.convertLinearToSRGB(value, value);\n\treturn value.map(encodeFloat).join('');\n}\n\n/** Returns the nearest higher power of two. */\nfunction ceilPowerOfTwo(value: number): number {\n\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/** Writes an NxN block of pixels to an image, at the given block index. */\nfunction writeBlock(pixels: NdArray<TypedArray>, index: number, value: vec4, blockSize: number): void {\n\tfor (let i = 0; i < blockSize; i++) {\n\t\tfor (let j = 0; j < blockSize; j++) {\n\t\t\tpixels.set(index * blockSize + i, j, 0, value[0] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 1, value[1] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 2, value[2] * 255);\n\t\t\tpixels.set(index * blockSize + i, j, 3, value[3] * 255);\n\t\t}\n\t}\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n *\n * @category Transforms\n */\nexport function partition(_options: PartitionOptions = PARTITION_DEFAULTS): Transform {\n\tconst options = { ...PARTITION_DEFAULTS, ..._options } as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n","var InterpolationInternal;\n\n(function (InterpolationInternal) {\n  InterpolationInternal[InterpolationInternal[\"STEP\"] = 0] = \"STEP\";\n  InterpolationInternal[InterpolationInternal[\"LERP\"] = 1] = \"LERP\";\n  InterpolationInternal[InterpolationInternal[\"SLERP\"] = 2] = \"SLERP\";\n})(InterpolationInternal || (InterpolationInternal = {}));\n\nconst TO_INTERPOLATION_INTERNAL = {\n  step: InterpolationInternal.STEP,\n  lerp: InterpolationInternal.LERP,\n  slerp: InterpolationInternal.SLERP\n};\nconst EPSILON = 0.000001;\n\n/* Implementation */\n\nfunction resampleDebug(input, output, interpolation, tolerance = 1e-4) {\n  const elementSize = output.length / input.length;\n  const tmp = new Array(elementSize).fill(0);\n  const value = new Array(elementSize).fill(0);\n  const valueNext = new Array(elementSize).fill(0);\n  const valuePrev = new Array(elementSize).fill(0);\n  const lastIndex = input.length - 1;\n  let writeIndex = 1;\n\n  for (let i = 1; i < lastIndex; ++i) {\n    const timePrev = input[writeIndex - 1];\n    const time = input[i];\n    const timeNext = input[i + 1];\n    const t = (time - timePrev) / (timeNext - timePrev);\n    let keep = false; // Remove unnecessary adjacent keyframes.\n\n    if (time !== timeNext && (i !== 1 || time !== input[0])) {\n      getElement(output, writeIndex - 1, valuePrev);\n      getElement(output, i, value);\n      getElement(output, i + 1, valueNext);\n\n      if (interpolation === 'slerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = slerp(tmp, valuePrev, valueNext, t);\n        const angle = getAngle(valuePrev, value) + getAngle(value, valueNext);\n        keep = !eq(value, sample, tolerance) || angle + Number.EPSILON >= Math.PI;\n      } else if (interpolation === 'lerp') {\n        // Prune keyframes colinear with prev/next keyframes.\n        const sample = vlerp(tmp, valuePrev, valueNext, t);\n        keep = !eq(value, sample, tolerance);\n      } else if (interpolation === 'step') {\n        // Prune keyframes identical to prev/next keyframes.\n        keep = !eq(value, valuePrev) || !eq(value, valueNext);\n      }\n    } // In-place compaction.\n\n\n    if (keep) {\n      if (i !== writeIndex) {\n        input[writeIndex] = input[i];\n        setElement(output, writeIndex, getElement(output, i, tmp));\n      }\n\n      writeIndex++;\n    }\n  } // Flush last keyframe (compaction looks ahead).\n\n\n  if (lastIndex > 0) {\n    input[writeIndex] = input[lastIndex];\n    setElement(output, writeIndex, getElement(output, lastIndex, tmp));\n    writeIndex++;\n  }\n\n  return writeIndex;\n}\n/* Utilities */\n\nfunction getElement(array, index, target) {\n  for (let i = 0, elementSize = target.length; i < elementSize; i++) {\n    target[i] = array[index * elementSize + i];\n  }\n\n  return target;\n}\n\nfunction setElement(array, index, value) {\n  for (let i = 0, elementSize = value.length; i < elementSize; i++) {\n    array[index * elementSize + i] = value[i];\n  }\n}\n\nfunction eq(a, b, tolerance = 0) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (Math.abs(a[i] - b[i]) > tolerance) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction lerp(v0, v1, t) {\n  return v0 * (1 - t) + v1 * t;\n}\n\nfunction vlerp(out, a, b, t) {\n  for (let i = 0; i < a.length; i++) out[i] = lerp(a[i], b[i], t);\n\n  return out;\n} // From gl-matrix.\n\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  let omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n\nfunction getAngle(a, b) {\n  const dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/** WASM loader for Web environments. */\nconst wasm = /* #__PURE__ */fetch( /* #__PURE__ */new URL('./release.wasm', import.meta.url));\n\n// SETUP\n///////////////////////////////////////////////////////////////////////////////\n\nlet exports;\nconst ready = /* #__PURE__ */new Promise(async (resolve, reject) => {\n  try {\n    const module = await WebAssembly.compile(await wasm);\n    exports = await instantiate(module, {});\n    resolve();\n  } catch (e) {\n    reject(e);\n  }\n});\n\nasync function instantiate(module, imports = {}) {\n  const instance = await WebAssembly.instantiate(module, {\n    env: Object.assign(Object.create(globalThis), {}, {\n      abort: __abort\n    })\n  });\n  return instance.exports;\n} ///////////////////////////////////////////////////////////////////////////////\n// PUBLIC API\n///////////////////////////////////////////////////////////////////////////////\n\n\nconst CHUNK_SIZE = 1024; // The first and last keyframes cannot be removed in any given step, but we need to\n// somehow remove keyframes on chunk boundaries. So after processing each chunk,\n// we copy its last two keyframes in front of the next chunk, and run from there.\n//\n// 🟩 ⬜️ ⬜️ ⬜️ ⬜️ ⬜️                  // chunk 1, original\n// 🟩 ⬜️ 🟨 🟥                       // chunk 1, resampled\n//            🟨 🟥 🟩 ⬜️ ⬜️ ⬜️       // chunk 2, original\n//            🟨 🟩 ⬜️ ⬜️            // chunk 2, resampled\n// ...\n\nfunction resample(input, output, interpolation, tolerance = 1e-4) {\n  __assert(!!exports, 'Await \"ready\" before using module.');\n\n  __assert(input instanceof Float32Array, 'Missing Float32Array input.');\n\n  __assert(output instanceof Float32Array, 'Missing Float32Array output.');\n\n  const outputSize = output.length / input.length;\n\n  __assert(Number.isInteger(outputSize), 'Invalid input/output counts.');\n\n  __assert(interpolation in TO_INTERPOLATION_INTERNAL, 'Invalid interpolation.');\n\n  __assert(Number.isFinite(tolerance), 'Invalid tolerance');\n\n  const interpVal = TO_INTERPOLATION_INTERNAL[interpolation];\n  const srcCount = input.length;\n  let dstCount = 0;\n\n  for (let chunkStart = 0; chunkStart < input.length; chunkStart += CHUNK_SIZE) {\n    const chunkCount = Math.min(srcCount - chunkStart, CHUNK_SIZE); // Allocate a two-keyframe prefix for all chunks after the first.\n\n    const prefixCount = chunkStart > 0 ? 2 : 0;\n    const chunkInput = new Float32Array(input.buffer, input.byteOffset + (chunkStart - prefixCount) * Float32Array.BYTES_PER_ELEMENT, chunkCount + prefixCount);\n    const chunkOutput = new Float32Array(output.buffer, output.byteOffset + (chunkStart - prefixCount) * outputSize * Float32Array.BYTES_PER_ELEMENT, (chunkCount + prefixCount) * outputSize); // Copy prefix to start of next chunk.\n\n    if (prefixCount > 0) {\n      input.copyWithin(chunkStart - prefixCount, dstCount - prefixCount, dstCount);\n      output.copyWithin((chunkStart - prefixCount) * outputSize, (dstCount - prefixCount) * outputSize, dstCount * outputSize);\n    }\n\n    const inputPtr = __retain(__lowerStaticArray(chunkInput, 4, 2));\n\n    const outputPtr = __retain(__lowerStaticArray(chunkOutput, 4, 2));\n\n    try {\n      exports.__setArgumentsLength(4);\n\n      const count = exports.resample(inputPtr, outputPtr, interpVal, tolerance) >>> 0;\n      dstCount -= prefixCount;\n\n      __liftStaticArray(inputPtr, input, dstCount, count);\n\n      __liftStaticArray(outputPtr, output, dstCount * outputSize, count * outputSize);\n\n      dstCount += count;\n    } finally {\n      __release(inputPtr);\n\n      __release(outputPtr);\n\n      exports.__collect();\n    }\n  } // console.log(`Memory: ${exports.memory.buffer.byteLength} bytes`);\n\n\n  return dstCount;\n} ///////////////////////////////////////////////////////////////////////////////\n// INTERNAL\n///////////////////////////////////////////////////////////////////////////////\n\nfunction __assert(cond, msg) {\n  if (!cond) throw new Error(msg);\n}\n\nfunction __retain(ptr) {\n  exports.__pin(ptr);\n\n  return ptr;\n}\n\nfunction __release(ptr) {\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftString(ptr) {\n  if (!ptr) return null;\n  const end = ptr + new Uint32Array(exports.memory.buffer)[ptr - 4 >>> 2] >>> 1,\n        memoryU16 = new Uint16Array(exports.memory.buffer);\n  let start = ptr >>> 1,\n      string = '';\n\n  while (end - start > 1024) string += String.fromCharCode(...memoryU16.subarray(start, start += 1024));\n\n  return string + String.fromCharCode(...memoryU16.subarray(start, end));\n}\n\nfunction __lowerStaticArray(values, id, align) {\n  const ptr = exports.__pin(exports.__new(values.length << align, id)) >>> 0;\n  new Float32Array(exports.memory.buffer, ptr, values.length).set(values);\n\n  exports.__unpin(ptr);\n\n  return ptr;\n}\n\nfunction __liftStaticArray(ptr, values, offset, count) {\n  values.set(new Float32Array(exports.memory.buffer, ptr, count), offset);\n}\n\nfunction __abort(messagePtr, fileNamePtr, lineNumber, columnNumber) {\n  const message = __liftString(messagePtr >>> 0);\n\n  const fileName = __liftString(fileNamePtr >>> 0);\n\n  lineNumber = lineNumber >>> 0;\n  columnNumber = columnNumber >>> 0;\n\n  (() => {\n    throw Error(`${message} in ${fileName}:${lineNumber}:${columnNumber}`);\n  })();\n}\n\nexport { ready, resample, resampleDebug };\n//# sourceMappingURL=keyframe-resample-browser.modern.js.map\n","import {\n\tAccessor,\n\tAnimationSampler,\n\tComponentTypeToTypedArray,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tTransformContext,\n\tTypedArray,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { createTransform, isTransformPending } from './utils.js';\nimport { resampleDebug } from 'keyframe-resample';\n\nconst NAME = 'resample';\n\nconst EMPTY_ARRAY = new Float32Array(0);\n\nexport interface ResampleOptions {\n\tready?: Promise<void>;\n\tresample?: unknown; // glTF-Transform/issues/996\n\ttolerance?: number;\n}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> = {\n\tready: Promise.resolve(),\n\tresample: resampleDebug,\n\ttolerance: 1e-4,\n};\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Result: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) → (0,0,1,1,0,0)\n *\n * Example:\n *\n * ```\n * import { ready, resample } from 'keyframe-resample';\n *\n * // JavaScript (slower)\n * await document.transform(resample());\n *\n * // WebAssembly (faster)\n * await document.transform(resample({ ready, resample }));\n * ```\n *\n * @category Transforms\n */\nexport function resample(_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform {\n\tconst options = { ...RESAMPLE_DEFAULTS, ..._options } as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst srcAccessorCount = document.getRoot().listAccessors().length;\n\t\tconst logger = document.getLogger();\n\n\t\tconst ready = options.ready;\n\t\tconst resample = options.resample as typeof resampleDebug;\n\n\t\tawait ready;\n\n\t\tfor (const animation of document.getRoot().listAnimations()) {\n\t\t\tconst samplerTargetPaths = new Map<AnimationSampler, GLTF.AnimationChannelTargetPath>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tsamplerTargetPaths.set(channel.getSampler()!, channel.getTargetPath()!);\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tconst samplerInterpolation = sampler.getInterpolation();\n\n\t\t\t\tif (samplerInterpolation === 'STEP' || samplerInterpolation === 'LINEAR') {\n\t\t\t\t\tconst input = sampler.getInput()!;\n\t\t\t\t\tconst output = sampler.getOutput()!;\n\n\t\t\t\t\taccessorsVisited.add(input);\n\t\t\t\t\taccessorsVisited.add(output);\n\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tconst tmpTimes = toFloat32Array(\n\t\t\t\t\t\tinput.getArray()!,\n\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\tinput.getNormalized()\n\t\t\t\t\t);\n\t\t\t\t\tconst tmpValues = toFloat32Array(\n\t\t\t\t\t\toutput.getArray()!,\n\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\toutput.getNormalized()\n\t\t\t\t\t);\n\n\t\t\t\t\tconst elementSize = tmpValues.length / tmpTimes.length;\n\t\t\t\t\tconst srcCount = tmpTimes.length;\n\t\t\t\t\tlet dstCount: number;\n\n\t\t\t\t\tif (samplerInterpolation === 'STEP') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'step', options.tolerance);\n\t\t\t\t\t} else if (samplerTargetPaths.get(sampler) === 'rotation') {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'slerp', options.tolerance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdstCount = resample(tmpTimes, tmpValues, 'lerp', options.tolerance);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dstCount < srcCount) {\n\t\t\t\t\t\t// Clone the input/output accessors, without cloning their underlying\n\t\t\t\t\t\t// arrays. Then assign the resampled data.\n\t\t\t\t\t\tconst srcTimes = input.getArray()!;\n\t\t\t\t\t\tconst srcValues = output.getArray()!;\n\n\t\t\t\t\t\tconst dstTimes = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpTimes.buffer, tmpTimes.byteOffset, dstCount),\n\t\t\t\t\t\t\tinput.getComponentType(),\n\t\t\t\t\t\t\tinput.getNormalized()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dstValues = fromFloat32Array(\n\t\t\t\t\t\t\tnew Float32Array(tmpValues.buffer, tmpValues.byteOffset, dstCount * elementSize),\n\t\t\t\t\t\t\toutput.getComponentType(),\n\t\t\t\t\t\t\toutput.getNormalized()\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tinput.setArray(EMPTY_ARRAY);\n\t\t\t\t\t\toutput.setArray(EMPTY_ARRAY);\n\n\t\t\t\t\t\tsampler.setInput(input.clone().setArray(dstTimes));\n\t\t\t\t\t\tsampler.setOutput(output.clone().setArray(dstValues));\n\n\t\t\t\t\t\tinput.setArray(srcTimes);\n\t\t\t\t\t\toutput.setArray(srcValues);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\t// Resampling may result in duplicate input or output sampler\n\t\t// accessors. Find and remove the duplicates after processing.\n\t\tconst dstAccessorCount = document.getRoot().listAccessors().length;\n\t\tif (dstAccessorCount > srcAccessorCount && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/** Returns a copy of the source array, as a denormalized Float32Array. */\nfunction toFloat32Array(\n\tsrcArray: TypedArray,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean\n): Float32Array {\n\tif (srcArray instanceof Float32Array) return srcArray.slice();\n\tconst dstArray = new Float32Array(srcArray);\n\tif (!normalized) return dstArray;\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = MathUtils.decodeNormalizedInt(dstArray[i], componentType);\n\t}\n\n\treturn dstArray;\n}\n\n/** Returns a copy of the source array, with specified component type and normalization. */\nfunction fromFloat32Array(\n\tsrcArray: Float32Array,\n\tcomponentType: GLTF.AccessorComponentType,\n\tnormalized: boolean\n): TypedArray {\n\tif (componentType === Accessor.ComponentType.FLOAT) return srcArray.slice();\n\tconst TypedArray = ComponentTypeToTypedArray[componentType];\n\tconst dstArray = new TypedArray(srcArray.length);\n\n\tfor (let i = 0; i < dstArray.length; i++) {\n\t\tdstArray[i] = normalized ? MathUtils.encodeNormalizedInt(srcArray[i], componentType) : srcArray[i];\n\t}\n\n\treturn dstArray;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n *\n * @category Transforms\n */\nexport function sequence(_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = { ...SEQUENCE_DEFAULTS, ..._options } as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes().filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => (a.getName() > b.getName() ? 1 : -1));\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor().setArray(new Float32Array(inputArray)).setBuffer(animBuffer);\n\t\t\tconst output = doc\n\t\t\t\t.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc\n\t\t\t\t.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc\n\t\t\t\t.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Accessor, Document, Primitive, PropertyType, Transform, TransformContext } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tremapAttribute,\n\tdeepSwapAttribute,\n\tisTransformPending,\n} from './utils.js';\nimport { weld } from './weld.js';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\n\nconst NAME = 'simplify';\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: unknown;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.0 (0%). */\n\tratio?: number;\n\t/** Limit on error, as a fraction of mesh radius. Default: 0.0001 (0.01%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.0,\n\terror: 0.0001,\n\tlockBorder: false,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If\n * error exceeds the specified 'error' threshold, the algorithm will quit\n * before reaching the target ratio. Examples:\n *\n * - ratio=0.0, error=0.0001: Aims for maximum simplification, constrained to 0.01% error.\n * - ratio=0.5, error=0.0001: Aims for 50% simplification, constrained to 0.01% error.\n * - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For\n * best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n *\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({ tolerance: 0.0001 }),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n *\n * @category Transforms\n */\nexport function simplify(_options: SimplifyOptions): Transform {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier | undefined;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false }));\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`${NAME}: Skipping primitive of mesh \"${mesh.getName()}\": Requires TRIANGLES draw mode.`,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsimplifyPrimitive(document, prim, options);\n\n\t\t\t\tif (prim.getIndices()!.getCount() === 0) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\t// Where simplification removes meshes, we may need to prune leaf nodes.\n\t\tawait document.transform(\n\t\t\tprune({ keepLeaves: false, propertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE] }),\n\t\t);\n\n\t\t// Where multiple primitive indices point into the same vertex streams, simplification\n\t\t// may write duplicate streams. Find and remove the duplicates after processing.\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nexport function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\n\tconst logger = document.getLogger();\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (1) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (position.getComponentType() !== Accessor.ComponentType.FLOAT) {\n\t\tif (position.getNormalized()) {\n\t\t\tconst src = positionArray;\n\t\t\tconst dst = new Float32Array(src.length);\n\n\t\t\t// Dequantize.\n\t\t\tfor (let i = 0, il = position.getCount(), el = [] as number[]; i < il; i++) {\n\t\t\t\tel = position.getElement(i, el);\n\t\t\t\tposition.setArray(dst).setElement(i, el).setArray(src);\n\t\t\t}\n\n\t\t\tpositionArray = dst;\n\t\t} else {\n\t\t\tpositionArray = new Float32Array(positionArray);\n\t\t}\n\t}\n\n\tif (srcIndices.getComponentType() !== Accessor.ComponentType.UNSIGNED_INT) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (2) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcVertexCount) / 3) * 3;\n\tconst [dstIndicesArray, error] = simplifier.simplify(\n\t\tindicesArray as Uint32Array,\n\t\tpositionArray as Float32Array,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\toptions.lockBorder ? ['LockBorder'] : [],\n\t);\n\n\tconst [remap, unique] = simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices, error: ${error.toFixed(4)}.`);\n\n\t// (3) Write vertex attributes.\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = srcAttribute.clone();\n\t\tremapAttribute(dstAttribute, remap, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// (4) Write indices.\n\n\tconst dstIndices = srcIndices.clone();\n\tdstIndices.setArray(srcVertexCount <= 65534 ? new Uint16Array(dstIndicesArray) : dstIndicesArray);\n\tprim.setIndices(dstIndices);\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\treturn prim;\n}\n","import { Document, MathUtils, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sparse';\n\n/** Options for the {@link sparse} function. */\nexport interface SparseOptions {\n\t/**\n\t * Threshold ratio used to determine when an accessor should be sparse.\n\t * Default: 1 / 3.\n\t */\n\tratio: number;\n}\n\nconst SPARSE_DEFAULTS: Required<SparseOptions> = {\n\tratio: 1 / 3,\n};\n\n/**\n * Scans all {@link Accessor Accessors} in the Document, detecting whether each Accessor\n * would benefit from sparse data storage. Currently, sparse data storage is used only\n * when many values (≥ ratio) are zeroes. Particularly for assets using morph target\n * (\"shape key\") animation, sparse data storage may significantly reduce file sizes.\n *\n * Example:\n *\n * ```ts\n * import { sparse } from '@gltf-transform/functions';\n *\n * accessor.getArray(); // → [ 0, 0, 0, 0, 0, 25.0, 0, 0, ... ]\n * accessor.getSparse(); // → false\n *\n * await document.transform(sparse({ratio: 1 / 10}));\n *\n * accessor.getSparse(); // → true\n * ```\n *\n * @experimental\n * @category Transforms\n */\nexport function sparse(_options: SparseOptions = SPARSE_DEFAULTS): Transform {\n\tconst options = { ...SPARSE_DEFAULTS, ..._options } as Required<SparseOptions>;\n\n\tconst ratio = options.ratio;\n\tif (ratio < 0 || ratio > 1) {\n\t\tthrow new Error(`${NAME}: Ratio must be between 0 and 1.`);\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\tlet modifiedCount = 0;\n\n\t\tfor (const accessor of root.listAccessors()) {\n\t\t\tconst count = accessor.getCount();\n\t\t\tconst base = Array(accessor.getElementSize()).fill(0);\n\t\t\tconst el = Array(accessor.getElementSize()).fill(0);\n\n\t\t\tlet nonZeroCount = 0;\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\taccessor.getElement(i, el);\n\t\t\t\tif (!MathUtils.eq(el, base, 0)) nonZeroCount++;\n\t\t\t\tif (nonZeroCount / count >= ratio) break;\n\t\t\t}\n\n\t\t\tconst sparse = nonZeroCount / count < ratio;\n\t\t\tif (sparse !== accessor.getSparse()) {\n\t\t\t\taccessor.setSparse(sparse);\n\t\t\t\tmodifiedCount++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Updated ${modifiedCount} accessors.`);\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { MathUtils, type Document, type Transform, type vec2 } from '@gltf-transform/core';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport { createTransform, fitWithin } from './utils.js';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern to match slots usage for resizing. */\n\tslots?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null,\n\tslots: null,\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with [Lanczos filtering](https://en.wikipedia.org/wiki/Lanczos_algorithm).\n *\n * Implementation provided by [ndarray-lanczos](https://github.com/donmccurdy/ndarray-lanczos)\n * package, which works in Web and Node.js environments. For a faster and more robust implementation\n * in Node.js, use {@link textureCompress}, providing a Sharp encoder and 'resize' options instead.\n *\n * @deprecated Prefer {@link textureCompress}, instead.\n * @privateRemarks TODO(v4): Remove this function, using `textureCompress()` instead.\n * @category Transforms\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = { ...TEXTURE_RESIZE_DEFAULTS, ..._options } as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern || options.pattern.test(name) || options.pattern.test(uri);\n\t\t\tif (!match) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`${NAME}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst slots = listTextureSlots(texture);\n\t\t\tif (options.slots && !slots.some((slot) => options.slots?.test(slot))) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst srcSize = texture.getSize()!;\n\t\t\tconst dstSize = fitWithin(srcSize, options.size);\n\n\t\t\tif (MathUtils.eq(srcSize, dstSize)) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, not within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst srcImage = texture.getImage()!;\n\t\t\tconst srcPixels = (await getPixels(srcImage, texture.getMimeType())) as ndarray.NdArray<Uint8Array>;\n\t\t\tconst dstPixels = ndarray(new Uint8Array(dstSize[0] * dstSize[1] * 4), [...dstSize, 4]);\n\n\t\t\tlogger.debug(`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`);\n\t\t\tlogger.debug(`${NAME}: Slots → [${slots.join(', ')}]`);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage(await savePixels(dstPixels, texture.getMimeType()));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { BufferUtils, Document, ImageUtils, Texture, TextureChannel, Transform, vec2 } from '@gltf-transform/core';\nimport { EXTTextureAVIF, EXTTextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport type sharp from 'sharp';\nimport { createTransform, fitWithin, formatBytes } from './utils.js';\nimport { TextureResizeFilter } from './texture-resize.js';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\n\nconst NAME = 'textureCompress';\n\ntype Format = (typeof FORMATS)[number];\nconst FORMATS = ['jpeg', 'png', 'webp', 'avif'] as const;\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/avif'];\n\nexport interface TextureCompressOptions {\n\t/** Instance of the Sharp encoder, which must be installed from the\n\t * 'sharp' package and provided by the caller. When not provided, a\n\t * platform-specific fallback implementation will be used, and most\n\t * quality- and compression-related options are ignored.\n\t */\n\tencoder?: unknown;\n\t/**\n\t * Target image format. If specified, included textures in other formats\n\t * will be converted. Default: original format.\n\t */\n\ttargetFormat?: Format;\n\t/**\n\t * Resizes textures to given maximum width/height, preserving aspect ratio.\n\t * For example, a 4096x8192 texture, resized with limit [2048, 2048] will\n\t * be reduced to 1024x2048.\n\t */\n\tresize?: vec2;\n\t/** Interpolation used if resizing. Default: TextureResizeFilter.LANCZOS3. */\n\tresizeFilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to compress, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern matching the format(s) to be compressed or converted. */\n\tformats?: RegExp | null;\n\t/** Pattern matching the material texture slot(s) to be compressed or converted. */\n\tslots?: RegExp | null;\n\n\t/** Quality, 1-100. Default: auto. */\n\tquality?: number | null;\n\t/**\n\t * Level of CPU effort to reduce file size, 0-100. PNG, WebP, and AVIF\n\t * only. Supported only when a Sharp encoder is provided. Default: auto.\n\t */\n\teffort?: number | null;\n\t/**\n\t * Use lossless compression mode. WebP and AVIF only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tlossless?: boolean;\n\t/**\n\t * Use near lossless compression mode. WebP only. Supported only when a\n\t * Sharp encoder is provided. Default: false.\n\t */\n\tnearLossless?: boolean;\n}\n\nexport type CompressTextureOptions = Omit<TextureCompressOptions, 'pattern' | 'formats' | 'slots'>;\n\n// IMPORTANT: No defaults for quality flags, see https://github.com/donmccurdy/glTF-Transform/issues/969.\nexport const TEXTURE_COMPRESS_DEFAULTS: Omit<TextureCompressOptions, 'resize' | 'targetFormat' | 'encoder'> = {\n\tresizeFilter: TextureResizeFilter.LANCZOS3,\n\tpattern: undefined,\n\tformats: undefined,\n\tslots: undefined,\n\tquality: undefined,\n\teffort: undefined,\n\tlossless: false,\n\tnearLossless: false,\n};\n\n/**\n * Optimizes images, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { textureCompress } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * // (A) Optimize without conversion.\n * await document.transform(\n * \ttextureCompress({encoder: sharp})\n * );\n *\n * // (B) Optimize and convert images to WebP.\n * await document.transform(\n * \ttextureCompress({\n * \t\tencoder: sharp,\n * \t\ttargetFormat: 'webp',\n * \t\tslots: /^(?!normalTexture).*$/ // exclude normal maps\n * \t})\n * );\n *\n * // (C) Resize and convert images to WebP in a browser, without a Sharp\n * // encoder. Most quality- and compression-related options are ignored.\n * await document.transform(\n * \ttextureCompress({ targetFormat: 'webp', resize: [1024, 1024] })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function textureCompress(_options: TextureCompressOptions): Transform {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<TextureCompressOptions>;\n\tconst targetFormat = options.targetFormat as Format | undefined;\n\tconst patternRe = options.pattern;\n\tconst formatsRe = options.formats;\n\tconst slotsRe = options.slots;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(texture);\n\t\t\t\tconst channels = getTextureChannelMask(texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${NAME}(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (patternRe && !patternRe.test(texture.getName()) && !patternRe.test(texture.getURI())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (formatsRe && !formatsRe.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slotsRe && slots.length && !slots.some((slot) => slotsRe.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.targetFormat === 'jpeg' && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst srcFormat = getFormat(texture);\n\t\t\t\tconst dstFormat = targetFormat || srcFormat;\n\t\t\t\tlogger.debug(`${prefix}: Format = ${srcFormat} → ${dstFormat}`);\n\t\t\t\tlogger.debug(`${prefix}: Slots = [${slots.join(', ')}]`);\n\n\t\t\t\tconst srcImage = texture.getImage()!;\n\t\t\t\tconst srcByteLength = srcImage.byteLength;\n\n\t\t\t\tawait compressTexture(texture, options);\n\n\t\t\t\tconst dstImage = texture.getImage()!;\n\t\t\t\tconst dstByteLength = dstImage.byteLength;\n\n\t\t\t\tconst flag = srcImage === dstImage ? ' (SKIPPED' : '';\n\n\t\t\t\tlogger.debug(`${prefix}: Size = ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}${flag}`);\n\t\t\t}),\n\t\t);\n\n\t\t// Attach EXT_texture_webp if needed.\n\t\tconst webpExtension = document.createExtension(EXTTextureWebP);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/webp')) {\n\t\t\twebpExtension.setRequired(true);\n\t\t} else {\n\t\t\twebpExtension.dispose();\n\t\t}\n\n\t\t// Attach EXT_texture_avif if needed.\n\t\tconst avifExtension = document.createExtension(EXTTextureAVIF);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/avif')) {\n\t\t\tavifExtension.setRequired(true);\n\t\t} else {\n\t\t\tavifExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Optimizes a single {@link Texture}, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * For best results use a Node.js environment, install the `sharp` module, and\n * provide an encoder. When the encoder is omitted — `sharp` works only in Node.js —\n * the implementation will use a platform-specific fallback encoder, and most\n * quality- and compression-related options are ignored.\n *\n * Example:\n *\n * ```javascript\n * import { compressTexture } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * const texture = document.getRoot().listTextures()\n * \t.find((texture) => texture.getName() === 'MyTexture');\n *\n * // (A) Node.js.\n * await compressTexture(texture, {\n * \tencoder: sharp,\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n *\n * // (B) Web.\n * await compressTexture(texture, {\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n * ```\n */\nexport async function compressTexture(texture: Texture, _options: CompressTextureOptions) {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<CompressTextureOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\n\tconst srcFormat = getFormat(texture);\n\tconst dstFormat = options.targetFormat || srcFormat;\n\tconst srcMimeType = texture.getMimeType();\n\tconst dstMimeType = `image/${dstFormat}`;\n\n\tconst srcImage = texture.getImage()!;\n\tconst dstImage = encoder\n\t\t? await _encodeWithSharp(srcImage, srcMimeType, dstMimeType, options)\n\t\t: await _encodeWithNdarrayPixels(srcImage, srcMimeType, dstMimeType, options);\n\n\tconst srcByteLength = srcImage.byteLength;\n\tconst dstByteLength = dstImage.byteLength;\n\n\tif (srcMimeType === dstMimeType && dstByteLength >= srcByteLength && !options.resize) {\n\t\t// Skip if src/dst formats match and dst is larger than the original.\n\t\treturn;\n\t} else if (srcMimeType === dstMimeType) {\n\t\t// Overwrite if src/dst formats match and dst is smaller than the original.\n\t\ttexture.setImage(dstImage);\n\t} else {\n\t\t// Overwrite, then update path and MIME type if src/dst formats differ.\n\t\tconst srcExtension = ImageUtils.mimeTypeToExtension(srcMimeType);\n\t\tconst dstExtension = ImageUtils.mimeTypeToExtension(dstMimeType);\n\t\tconst dstURI = texture.getURI().replace(new RegExp(`\\\\.${srcExtension}$`), `.${dstExtension}`);\n\t\ttexture.setImage(dstImage).setMimeType(dstMimeType).setURI(dstURI);\n\t}\n}\n\nasync function _encodeWithSharp(\n\tsrcImage: Uint8Array,\n\t_srcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst encoder = options.encoder as typeof sharp;\n\tlet encoderOptions: sharp.JpegOptions | sharp.PngOptions | sharp.WebpOptions | sharp.AvifOptions = {};\n\n\tconst dstFormat = getFormatFromMimeType(dstMimeType);\n\n\tswitch (dstFormat) {\n\t\tcase 'jpeg':\n\t\t\tencoderOptions = { quality: options.quality } as sharp.JpegOptions;\n\t\t\tbreak;\n\t\tcase 'png':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 10),\n\t\t\t} as sharp.PngOptions;\n\t\t\tbreak;\n\t\tcase 'webp':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 6),\n\t\t\t\tlossless: options.lossless,\n\t\t\t\tnearLossless: options.nearLossless,\n\t\t\t} as sharp.WebpOptions;\n\t\t\tbreak;\n\t\tcase 'avif':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 9),\n\t\t\t\tlossless: options.lossless,\n\t\t\t} as sharp.AvifOptions;\n\t\t\tbreak;\n\t}\n\n\tconst instance = encoder(srcImage).toFormat(dstFormat, encoderOptions);\n\n\tif (options.resize) {\n\t\tinstance.resize(options.resize[0], options.resize[1], {\n\t\t\tfit: 'inside',\n\t\t\tkernel: options.resizeFilter,\n\t\t\twithoutEnlargement: true,\n\t\t});\n\t}\n\n\treturn BufferUtils.toView(await instance.toBuffer());\n}\n\nasync function _encodeWithNdarrayPixels(\n\tsrcImage: Uint8Array,\n\tsrcMimeType: string,\n\tdstMimeType: string,\n\toptions: Required<CompressTextureOptions>,\n): Promise<Uint8Array> {\n\tconst srcPixels = (await getPixels(srcImage, srcMimeType)) as ndarray.NdArray<Uint8Array>;\n\n\tif (options.resize) {\n\t\tconst [w, h] = srcPixels.shape;\n\t\tconst dstSize = fitWithin([w, h], options.resize);\n\t\tconst dstPixels = ndarray(new Uint8Array(dstSize[0] * dstSize[1] * 4), [...dstSize, 4]);\n\t\toptions.resizeFilter === TextureResizeFilter.LANCZOS3\n\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\treturn savePixels(dstPixels, dstMimeType);\n\t}\n\n\treturn savePixels(srcPixels, dstMimeType);\n}\n\nfunction getFormat(texture: Texture): Format {\n\treturn getFormatFromMimeType(texture.getMimeType());\n}\n\nfunction getFormatFromMimeType(mimeType: string): Format {\n\tconst format = mimeType.split('/').pop() as Format | undefined;\n\tif (!format || !FORMATS.includes(format)) {\n\t\tthrow new Error(`Unknown MIME type \"${mimeType}\".`);\n\t}\n\treturn format;\n}\n\nfunction remap(value: number | null | undefined, srcMax: number, dstMax: number): number | undefined {\n\tif (value == null) return undefined;\n\treturn Math.round((value / srcMax) * dstMax);\n}\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n *\n * @category Transforms\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = { ...TANGENTS_DEFAULTS, ..._options } as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'unpartition';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n *\n * @category Transforms\n */\nexport function unpartition(_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNPARTITION_DEFAULTS, ..._options } as Required<UnpartitionOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'vertexColorSpace';\n\n/** Options for the {@link vertexColorSpace} function. */\nexport interface ColorSpaceOptions {\n\t/** Input color space of vertex colors, to be converted to \"srgb-linear\". Required. */\n\tinputColorSpace: 'srgb' | 'srgb-linear' | 'sRGB';\n\t/** @deprecated Renamed to 'colorSpace'. */\n\tinputEncoding?: 'srgb' | 'srgb-linear' | 'sRGB';\n}\n\n/** @deprecated Renamed to {@link vertexColorSpace}. */\nexport const colorspace = vertexColorSpace;\n\n/**\n * Vertex color color space correction. The glTF format requires vertex colors to be stored\n * in Linear Rec. 709 D65 color space, and this function provides a way to correct vertex\n * colors that are (incorrectly) stored in sRGB.\n *\n * Example:\n *\n * ```typescript\n * import { vertexColorSpace } from '@gltf-transform/functions';\n *\n * await document.transform(\n *   vertexColorSpace({ inputColorSpace: 'srgb' })\n * );\n * ```\n *\n * @category Transforms\n */\nexport function vertexColorSpace(options: ColorSpaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst inputColorSpace = (options.inputColorSpace || options.inputEncoding || '').toLowerCase();\n\n\t\tif (inputColorSpace === 'srgb-linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (inputColorSpace !== 'srgb') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input color space \"${inputColorSpace}\" – should be \"srgb\" or ` +\n\t\t\t\t\t'\"srgb-linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Node, Scene } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/** @deprecated Use {@link listNodeScenes} instead. */\nexport function getNodeScene(node: Node): Scene | null {\n\treturn listNodeScenes(node)[0] || null;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRMaterialsUnlit } from '@gltf-transform/extensions';\n\n/**\n * @category Transforms\n */\nexport function unlit(): Transform {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(KHRMaterialsUnlit) as KHRMaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n}\n"],"names":["rewriteTexture","source","target","fn","Promise","resolve","srcImage","getImage","getPixels","getMimeType","then","pixels","i","shape","j","savePixels","dstImage","setImage","setMimeType","e","reject","createTransform","name","Object","defineProperty","value","isTransformPending","context","initial","pending","stack","lastIndexOf","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","constructor","_map","Map","size","has","k","add","v","entry","this","get","Set","set","keys","formatBytes","bytes","decimals","dm","Math","floor","log","parseFloat","pow","toFixed","formatLong","x","toString","replace","formatDeltaOp","a","b","abs","formatDelta","deepListAttributes","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","shallowEqualsArray","length","remapAttribute","remap","dstCount","elementSize","getElementSize","srcCount","srcArray","getArray","dstArray","slice","setArray","createIndices","count","maxIndex","array","Uint16Array","Uint32Array","createPrimGroupKey","document","Document","fromGraph","getGraph","material","getMaterial","getRoot","listMaterials","indexOf","listSemantics","sort","map","semantic","getComponentType","join","fitWithin","limit","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","NAME","CENTER_DEFAULTS","pivot","listNodeScenes","node","visited","parent","child","getParentNode","listParents","filter","Scene","clearNodeParent","scenes","setMatrix","getWorldMatrix","removeChild","scene","addChild","ARRAY_TYPE","Float32Array","invert","out","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","b0","b1","b2","b3","create","glMatrix.ARRAY_TYPE","min","max","scale","normalize","y","z","len","sqrt","transformMat4","m","w","transformMat3","hypot","arguments","DEDUP_DEFAULTS","propertyTypes","PropertyType","ACCESSOR","MESH","TEXTURE","MATERIAL","SKIN","dedup","_options","options","propertyType","includes","logger","getLogger","indicesMap","attributeMap","inputMap","outputMap","meshes","listMeshes","forEach","mesh","listPrimitives","primitive","accessor","hashAccessor","animation","listAnimations","sampler","listSamplers","getInput","getOutput","group","hash","getType","getNormalized","getSparse","hashSet","detectDuplicates","duplicates","aData","BufferUtils","toView","equals","total","hashGroup","values","debug","input","output","dispose","dedupAccessors","root","textures","listTextures","bData","aSize","getSize","bSize","entries","_ref","property","Root","dedupImages","materials","skip","modifierCache","hasModifier","_ref2","dedupMaterials","refs","listAccessors","index","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","targetMesh","ROOT","dedupMeshes","skins","listSkins","listJoints","_ref3","dedupSkins","primKeyItems","prop","cache","graph","visitedNodes","edgeQueue","listParentEdges","edge","pop","getAttributes","modifyChild","getChild","childEdge","listChildEdges","listTextureInfoByMaterial","results","traverse","textureInfoNames","Texture","getName","TextureInfo","ExtensionProperty","PRUNE_DEFAULTS","NODE","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","keepAttributes","prune","doc","disposed","markDisposed","listScenes","nodeTreeShake","listChildren","isUsed","some","ptype","getParent","SCENE","listNodes","treeShake","listCameras","indirectTreeShake","materialPrims","unused","listUnusedSemantics","listRequiredSemantics","pruneAttributes","prims","shiftTexCoords","anim","channel","listChannels","getTargetNode","samplers","listBuffers","str","t","info","p","AnimationChannel","listEdges","setAttribute","required","startsWith","semantics","edges","textureNames","getTexCoord","match","textureInfoList","texCoordSet","texCoordList","texCoordMap","texCoord","semanticMap","textureInfo","setTexCoord","updatePrim","srcSemantics","srcSemantic","uv","dstSemantic","Tolerance","DEFAULT","TEXCOORD","COLOR","NORMAL","JOINTS","WEIGHTS","WELD_DEFAULTS","tolerance","toleranceNormal","overwrite","exhaustive","weld","expandWeldOptions","_temp2","transform","weldPrimitive","_temp","c","_document","_prim","attr","numVertices","buffer","getBuffer","createAccessor","setBuffer","setType","Accessor","Type","SCALAR","setIndices","_indexPrimitive","srcPosition","srcIndices","uniqueIndices","attributeTolerance","getAttributeTolerance","kv","posA","posB","grid","cellSize","POSITION","getElement","key","getGridKey","weldMap","writeMap","fill","srcVertexCount","dstVertexCount","cellKeys","getGridNeighborhoodKeys","cells","cellKey","neighbors","isBaseMatch","every","compareAttributes","isTargetMatch","dstIndicesCount","dstIndicesArray","getScalar","clone","srcAttr","swapAttributes","tmpIndicesArray","Infinity","il","cleanPrimitive","_weldPrimitive","reorder","dstAttrArray","ArrayCtor","dstAttr","done","Uint8Array","el","setElement","_a","_b","getMinNormalized","getMaxNormalized","diff","bi","range","_semantic","CELL_OFFSETS","_p","round","PI","Number","EPSILON","transformPrimitive","matrix","skipIndices","_prim$getIndices","applyMatrix","normal","applyNormalMatrix","tangent","applyTangentMatrix","setScalar","reversePrimitiveWindingOrder","vector","createVec3","setNormalized","normalMatrix","fromMat4","b21","transpose","normalizeVec3","v3","v4","createVec4","transformMesh","srcPrim","dstPrim","srcTarget","dstTarget","parents","flatMap","attributes","srcAttribute","PrimitiveTarget","dstAttribute","attributeSkipIndices","primSkipIndices","IDENTITY","DEQUANTIZE_DEFAULTS","pattern","dequantizePrimitive","dequantizeAttribute","test","getComponentSize","DRACO_DEFAULTS","method","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","SRGB_PATTERN","properties","sceneBounds","getBounds","rootName","bboxMin","toPrecision","bboxMax","instances","glPrimitives","verts","meshIndices","meshAccessors","accessorToTypeLabel","targ","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","extensions","listExtensions","slots","ref","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","resolution","ImageUtils","compression","dfd","readKTX","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","uri","getURI","mimeType","gpuSize","getVRAMByteLength","minTime","maxTime","getMin","getMax","keyframes","channels","duration","NumericTypeLabels","Int32Array","Int16Array","Int8Array","INSTANCE_DEFAULTS","pruneUnusedNodes","nodes","unusedNodes","getCamera","getMesh","getSkin","nodeParent","hasVolume","getExtension","hasScale","getWorldScale","MathUtils","eq","createBatch","batchExtension","batchTranslation","batchRotation","batchScale","createInstancedMesh","JOIN_PRIMITIVE_DEFAULTS","skipValidation","joinPrimitives","templatePrim","remapList","indicesList","_getOrCreateIndices","undefined","createPrimitive","setMode","setMaterial","tplAttribute","AttributeArray","ComponentTypeToTypedArray","dstIndices","dstNextIndex","primIndex","indicesArray","primStartIndex","primNextIndex","_matrix","JOIN_DEFAULTS","keepMeshes","keepNamed","_joinLevel","groups","children","nodeIndex","dequantizeTransformableAttributes","isNamed","primMeshes","primNodes","dstNode","dstMesh","joinGroups","srcNodes","isSharedMesh","setMesh","dstMatrix","getMatrix","primNode","removePrimitive","hasSharedAttributes","_deepClonePrimitive","addPrimitive","getTextureChannelMask","mask","Material","AlphaMode","OPAQUE","TextureChannel","A","warn","listTextureSlots","REORDER_DEFAULTS","encoder","ready","plan","indicesToAttributes","indicesToMode","attributesToPrimitives","createLayoutPlan","unique","reorderMesh","sortPrimitiveWeights","isFinite","vertexCount","setCount","srcWeights","dstWeights","srcJoints","dstJoints","getVertexArray","setVertexArray","weights","joints","normList","typeList","isNormalizeSafe","templateAttribute","templateArray","componentType","normalized","normalizedComponentType","delta","decodeNormalizedInt","weightsSum","sum","intValue","encodeNormalizedInt","normalizePrimitiveWeights","vertexIndex","prefix","SIGNED_INT","TRANSLATION","ROTATION","SCALE","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","nodeTransform","createExtension","KHRMeshQuantization","setRequired","getNodeTransform","bboxes","result","bbox","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","quantizePrimitive","bits","ctor","getQuantizationSettings","fromTransform","quantizeAttribute","volume","offset","transformMatrix","Node","animChannels","isAnimated","getTargetPath","isParentNode","skin","setSkin","transformSkin","batch","setExtension","transformBatch","targetNode","createNode","setTargetNode","nodeMatrix","multiplyMat4","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","_batch$getAttribute","_batch$getAttribute2","_batch$getAttribute3","instanceTranslation","instanceRotation","instanceScale","tpl","T_IDENTITY","R_IDENTITY","S_IDENTITY","r","s","instanceMatrix","compose","decompose","getThicknessFactor","setThicknessFactor","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","sign","setSparse","positions","relativePositions","flatBounds","relMin","relMax","tmpMin","tmpMax","xx","q","x2","xy","y2","xz","z2","yz","wx","wy","wz","sy","sz","yy","zz","sx","MESHOPT_DEFAULTS","level","_settle","pact","state","_Pact","bind","observer","o","prototype","onFulfilled","onRejected","_this","_isSettledPact","thenable","unweld","unweldAttribute","NORMALS_DEFAULTS","computeNormal","B","PALETTE_DEFAULTS","blockSize","encodeFloat","hex","encodeRGBA","ColorUtils","convertLinearToSRGB","ceilPowerOfTwo","ceil","LN2","writeBlock","PARTITION_DEFAULTS","animations","createBufferURI","basename","existing","InterpolationInternal","lerp","v0","v1","vlerp","slerp","omega","cosom","sinom","scale0","scale1","ax","ay","az","aw","bx","by","bz","bw","acos","sin","getAngle","dotproduct","dot","EMPTY_ARRAY","RESAMPLE_DEFAULTS","resample","interpolation","tmp","valueNext","valuePrev","lastIndex","writeIndex","timePrev","time","timeNext","keep","sample","angle","toFloat32Array","fromFloat32Array","ComponentType","FLOAT","TypedArray","SEQUENCE_DEFAULTS","fps","SIMPLIFY_DEFAULTS","ratio","error","lockBorder","simplifyPrimitive","simplifier","positionArray","UNSIGNED_INT","targetCount","simplify","compactMesh","SPARSE_DEFAULTS","callback","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","compressTexture","TEXTURE_COMPRESS_DEFAULTS","srcFormat","getFormat","dstFormat","targetFormat","srcMimeType","dstMimeType","_encodeWithSharp","_srcMimeType","encoderOptions","getFormatFromMimeType","quality","effort","lossless","nearLossless","instance","toFormat","resize","fit","kernel","resizeFilter","withoutEnlargement","_toView","toBuffer","_instance$toBuffer","call","_encodeWithNdarrayPixels","srcPixels","h","dstSize","dstPixels","ndarray","lanczos3","lanczos2","srcExtension","mimeTypeToExtension","dstExtension","dstURI","RegExp","setURI","FORMATS","SUPPORTED_MIME_TYPES","formats","format","split","srcMax","dstMax","TANGENTS_DEFAULTS","getNormalTexcoord","normalTextureInfo","getNormalTextureInfo","filterPrimitive","meshName","colorspace","vertexColorSpace","inputColorSpace","inputEncoding","toLowerCase","converted","sRGBToLinear","updatePrimitive","color","offsetNode","setTranslation","getTranslation","localMatrix","KHRDracoMeshCompression","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","TEX_COORD","GENERIC","joint","animated","hasJointParent","hasAnimatedParent","isColor","EXTMeshGPUInstancing","numBatches","numInstances","meshInstances","modifiedNodes","batchNode","needsTranslation","needsRotation","needsScale","getWorldTranslation","getWorldRotation","listProperties","R","G","textureEdge","EXTMeshoptCompression","QUANTIZE","FILTER","_temp4","specGlossExtension","tex","inputTextures","listExtensionsUsed","ext","extensionName","iorExtension","KHRMaterialsIOR","specExtension","KHRMaterialsSpecular","KHRMaterialsPBRSpecularGlossiness","_temp3","_forOf","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","modified","faceNormal","_temp6","nextPaletteMaterialIndex","srcMaterial","materialKeyMap","padUV","materialIndices","keyCount","padWidth","dstMaterial","paletteMaterials","skipProps","suffix","padStart","setName","baseColorTexture","setMinFilter","MinFilter","NEAREST","setMagFilter","MagFilter","emissiveTexture","setEmissiveFactor","setEmissiveTexture","getEmissiveTextureInfo","metallicRoughnessTexture","paletteTexturePixels","metallicRoughness","image","emissive","materialKeys","materialProps","baseColor","getBaseColorFactor","getEmissiveFactor","getRoughnessFactor","metallic","getMetallicFactor","visitedKeys","nextIndex","_temp5","existingURIs","meshIndex","isArray","createBuffer","primTarget","partitionMeshes","animIndex","partitionAnimations","accessorsVisited","srcAccessorCount","samplerTargetPaths","getSampler","samplerInterpolation","getInterpolation","tmpTimes","tmpValues","srcTimes","srcValues","dstTimes","byteOffset","dstValues","setInput","setOutput","dstAccessorCount","sequenceNodes","createAnimation","animBuffer","inputArray","outputArray","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","modifiedCount","base","nonZeroCount","sparse","generateTangents","attributeIDs","tangentCache","meshPrimitives","texcoordSemantic","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangentBuffer","tangentArray","patternRe","formatsRe","slotsRe","all","textureIndex","textureLabel","slot","srcByteLength","dstByteLength","flag","webpExtension","EXTTextureWebP","avifExtension","EXTTextureAVIF","_exit","_result","_options$slots","srcSize","message","_setImage","_savePixels","unlit","KHRMaterialsUnlit","createUnlit"],"mappings":"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"}